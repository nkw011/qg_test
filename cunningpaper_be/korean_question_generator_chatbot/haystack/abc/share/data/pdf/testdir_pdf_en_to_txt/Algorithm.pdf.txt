AlgorithmIn mathematics and computer science, an algorithm (/ˈælɡərɪðəm/ (listen)) is a finite sequence ofrigorous instructions, typically used to solve a class of specific problems or to perform a computation.[1]Algorithms are used as specifications for performing calculations and data processing. More advancedalgorithms can use conditionals to divert the code execution through various routes (referred to asautomated decision-making) and deduce valid inferences (referred to as automated reasoning), achievingautomation eventually. Using human characteristics as descriptors of machines in metaphorical ways wasalready practiced by Alan Turing with terms such as "memory", "search" and "stimulus".[2]In contrast, a heuristic is an approach to problem solving that may not be fully specified or may notguarantee correct or optimal results, especially in problem domains where there is no well-defined correct oroptimal result.[3]As an effective method, an algorithm can be expressed within a finite amount of space and time,[4] and in awell-defined formal language[5] for calculating a function.[6] Starting from an initial state and initial input(perhaps empty),[7] the instructions describe a computation that, when executed, proceeds through a finite[8]number of well-defined successive states, eventually producing "output"[9] and terminating at a final endingstate. The transition from one state to the next is not necessarily deterministic; some algorithms, known asrandomized algorithms, incorporate random input.[10]The concept of algorithms has existed since antiquity. Arithmetic algorithms, such as a division algorithm,were used by ancient Babylonian mathematicians c. 2500 BC and Egyptian mathematicians c. 1550BC.[11] Greek mathematicians later used algorithms in 240 BC in the sieve of Eratosthenes for findingprime numbers, and the Euclidean algorithm for finding the greatest common divisor of two numbers.[12]Arabic mathematicians such as al-Kindi in the 9th century used cryptographic algorithms for code-breaking,based on frequency analysis.[13]The word algorithm is derived from the Latin translation, Algoritmi de numero Indorum, of the 9th-centuryPersian mathematician Muhammad ibn Musa al-Khwarizmi's arithmetic treatise “Al-Khwarizmi Concerningthe Hindu Art of Reckoning”.[14][15][16][17] Al-Khwarizmi was a mathematician, astronomer, andgeographer, who acted as a scholar in the House of Wisdom in Baghdad, whose name means "the native ofKhwarazm", a region that was part of Greater Iran and is now in Uzbekistan.[18][19] In about the year 825,al-Khwarizmi wrote an Arabic language treatise on the Hindu–Arabic numeral system, which wastranslated into Latin during the 12th century. The manuscript starts with the phrase Dixit Algorizmi ("Thusspoke Al-Khwarizmi"), where "Algorizmi" was the translator's Latinization of Al-Khwarizmi's name.[20]Al-Khwarizmi was the most widely read mathematician in Europe in the late Middle Ages, primarilythrough another of his books, the Algebra.[21] In late medieval Latin, algorismus, English "algorism", thecorruption of his name, meant the "decimal number system".[22] In the 15th century, under the influence ofthe Greek word ἀριθμός (arithmos), "number" (cf. "arithmetic"), the Latin word was altered toalgorithmus, and the corresponding English term "algorithm" is first attested in the 17th century; themodern sense was introduced in the 19th century.[23]HistoryFlowchart of an algorithm (Euclid'salgorithm) for calculating the greatestcommon divisor (g.c.d.) of twonumbers a and b in locations namedA and B. The algorithm proceeds bysuccessive subtractions in twoloops: IF the test B ≥ A yields "yes"or "true" (more accurately, thenumber b in location B is greaterthan or equal to the number a inlocation A) THEN, the algorithmspecifies B ← B − A (meaning thenumber b − a replaces the old b).
Similarly, IF A > B, THEN A ← A − B.
The process terminates when (thecontents of) B is 0, yielding theg.c.d. in A. (Algorithm derived fromScott 2009:13; symbols and drawingstyle from Tausworthe 1977).
Indian mathematics was predominantly algorithmic. Algorithms thatare representative of the Indian mathematical tradition range fromthe ancient Śulbasūtrās to the medieval texts of the KeralaSchool.[24]In English, the word algorithm was first used in about 1230 andthen by Chaucer in 1391. English adopted the French term, but itwas not until the late 19th century that "algorithm" took on themeaning that it has in modern English.[25]Another early use of the word is from 1240, in a manual titledCarmen de Algorismo composed by Alexandre de Villedieu. Itbegins with:Haec algorismus ars praesens dicitur, in qua / TalibusIndorum fruimur bis quinque figuris.
which translates to:Algorism is the art by which at present we use thoseIndian figures, which number two times five.
The poem is a few hundred lines long and summarizes the art ofcalculating with the new styled Indian dice (Tali Indorum), orHindu numerals.[26]A partial formalization of the modern concept of algorithm beganwith attempts to solve the Entscheidungsproblem (decisionproblem) posed by David Hilbert in 1928. Later formalizationswere framed as attempts to define "effective calculability"[27] or"effective method".[28] Those formalizations included the Gödel–Herbrand–Kleene recursive functions of 1930, 1934 and 1935,Alonzo Church's lambda calculus of 1936, Emil Post's Formulation1 of 1936, and Alan Turing's Turing machines of 1936–37 and1939.
An informal definition could be "a set of rules that precisely definesa sequence of operations",[29] which would include all computerprograms (including programs that do not perform numericcalculations), and (for example) any prescribed bureaucraticprocedure[30] or cook-book recipe.[31]In general, a program is only an algorithm if it stops eventually[32]—even though infinite loops maysometimes prove desirable.
Informal definitionAda Lovelace's diagram from "noteG", the first published computeralgorithmA prototypical example of an algorithm is the Euclidean algorithm,which is used to determine the maximum common divisor of twointegers; an example (there are others) is described by the flowchartabove and as an example in a later section.
Boolos, Jeffrey & 1974, 1999 offer an informal meaning of theword "algorithm" in the following quotation:No human being can write fast enough, or longenough, or small enough †  ( † "smaller and smallerwithout limit ... you'd be trying to write on molecules,on atoms, on electrons") to list all members of anenumerably infinite set by writing out their names, oneafter another, in some notation. But humans can dosomething equally useful, in the case of certainenumerably infinite sets: They can give explicitinstructions for determining the nth member of the set,for arbitrary finite n. Such instructions are to be givenquite explicitly, in a form in which they could befollowed by a computing machine, or by a human whois capable of carrying out only very elementaryoperations on symbols.[33]An "enumerably infinite set" is one whose elements can be put into one-to-one correspondence with theintegers. Thus Boolos and Jeffrey are saying that an algorithm implies instructions for a process that"creates" output integers from an arbitrary "input" integer or integers that, in theory, can be arbitrarily large.
For example, an algorithm can be an algebraic equation such as y = m + n (i.e., two arbitrary "inputvariables" m and n that produce an output y), but various authors' attempts to define the notion indicate thatthe word implies much more than this, something on the order of (for the addition example):Precise instructions (in a language understood by "the computer")[34] for a fast, efficient,"good"[35] process that specifies the "moves" of "the computer" (machine or human,equipped with the necessary internally contained information and capabilities)[36] to find,decode, and then process arbitrary input integers/symbols m and n, symbols + and = ...
and "effectively"[37] produce, in a "reasonable" time,[38] output-integer y at a specifiedplace and in a specified format.
The concept of algorithm is also used to define the notion of decidability—a notion that is central forexplaining how formal systems come into being starting from a small set of axioms and rules. In logic, thetime that an algorithm requires to complete cannot be measured, as it is not apparently related to thecustomary physical dimension. From such uncertainties, that characterize ongoing work, stems theunavailability of a definition of algorithm that suits both concrete (in some sense) and abstract usage of theterm.
Most algorithms are intended to be implemented as computer programs. However, algorithms are alsoimplemented by other means, such as in a biological neural network (for example, the human brainimplementing arithmetic or an insect looking for food), in an electrical circuit, or in a mechanical device.
FormalizationAlgorithms are essential to the way computers process data. Many computer programs contain algorithmsthat detail the specific instructions a computer should perform—in a specific order—to carry out a specifiedtask, such as calculating employees' paychecks or printing students' report cards. Thus, an algorithm can beconsidered to be any sequence of operations that can be simulated by a Turing-complete system. Authorswho assert this thesis include Minsky (1967), Savage (1987), and Gurevich (2000):Minsky: "But we will also maintain, with Turing ... that any procedure which could "naturally"be called effective, can, in fact, be realized by a (simple) machine. Although this may seemextreme, the arguments ... in its favor are hard to refute".[39] Gurevich: "… Turing's informalargument in favor of his thesis justifies a stronger thesis: every algorithm can be simulated by aTuring machine … according to Savage [1987], an algorithm is a computational processdefined by a Turing machine".[40]Turing machines can define computational processes that do not terminate. The informal definitions ofalgorithms generally require that the algorithm always terminates. This requirement renders the task ofdeciding whether a formal procedure is an algorithm impossible in the general case—due to a majortheorem of computability theory known as the halting problem.
Typically, when an algorithm is associated with processing information, data can be read from an inputsource, written to an output device and stored for further processing. Stored data are regarded as part of theinternal state of the entity performing the algorithm. In practice, the state is stored in one or more datastructures.
For some of these computational processes, the algorithm must be rigorously defined: and specified in theway it applies in all possible circumstances that could arise. This means that any conditional steps must besystematically dealt with, case by case; the criteria for each case must be clear (and computable).
Because an algorithm is a precise list of precise steps, the order of computation is always crucial to thefunctioning of the algorithm. Instructions are usually assumed to be listed explicitly, and are described asstarting "from the top" and going "down to the bottom"—an idea that is described more formally by flow ofcontrol.
So far, the discussion on the formalization of an algorithm has assumed the premises of imperativeprogramming. This is the most common conception—one which attempts to describe a task in discrete,"mechanical" means. Unique to this conception of formalized algorithms is the assignment operation, whichsets the value of a variable. It derives from the intuition of "memory" as a scratchpad. An example of suchan assignment can be found below.
For some alternate conceptions of what constitutes an algorithm, see functional programming and logicprogramming.
Algorithms can be expressed in many kinds of notation, including natural languages, pseudocode,flowcharts, drakon-charts, programming languages or control tables (processed by interpreters). Naturallanguage expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex ortechnical algorithms. Pseudocode, flowcharts, drakon-charts and control tables are structured ways toexpress algorithms that avoid many of the ambiguities common in the statements based on natural language.
Programming languages are primarily intended for expressing algorithms in a form that can be executed bya computer, but are also often used as a way to define or document algorithms.
Expressing algorithmsThere is a wide variety of representations possible and one can express a given Turing machine program asa sequence of machine tables (see finite-state machine, state transition table and control table for more), asflowcharts and drakon-charts (see state diagram for more), or as a form of rudimentary machine code orassembly code called "sets of quadruples" (see Turing machine for more).
Representations of algorithms can be classed into three accepted levels of Turing machine description, asfollows:[41]1 High-level description"...prose to describe an algorithm, ignoring the implementation details. At this level, we donot need to mention how the machine manages its tape or head."2 Implementation description"...prose used to define the way the Turing machine uses its head and the way that it storesdata on its tape. At this level, we do not give details of states or transition function."3 Formal descriptionMost detailed, "lowest level", gives the Turing machine's "state table".
For an example of the simple algorithm "Add m+n" described in all three levels, see Examples.
Algorithm design refers to a method or a mathematical process for problem-solving and engineeringalgorithms. The design of algorithms is part of many solution theories, such as divide-and-conquer ordynamic programming within operation research. Techniques for designing and implementing algorithmdesigns are also called algorithm design patterns,[42] with examples including the template method patternand the decorator pattern.
One of the most important aspects of algorithm design is resource (run-time, memory usage) efficiency; thebig O notation is used to describe e.g. an algorithm's run-time growth as the size of its input increases.
Typical steps in the development of algorithms:1. Problem definition2. Development of a model3. Specification of the algorithm4. Designing an algorithm5. Checking the correctness of the algorithm6. Analysis of algorithm7. Implementation of algorithm8. Program testing9. Documentation preparation"Elegant" (compact) programs, "good" (fast) programs : The notion of "simplicity and elegance" appearsinformally in Knuth and precisely in Chaitin:Knuth: " ... we want good algorithms in some loosely defined aesthetic sense. One criterion... is the length of time taken to perform the algorithm .... Other criteria are adaptability of thealgorithm to computers, its simplicity, and elegance, etc."[43]DesignComputer algorithmsLogical NAND algorithm implementedelectronically in 7400 chipFlowchart examples of the canonicalBöhm-Jacopini structures: theSEQUENCE (rectangles descendingthe page), the WHILE-DO and the IF-THEN-ELSE. The three structuresare made of the primitive conditionalGOTO (IF test THEN GOTOstep xxx, shown as diamond), theunconditional GOTO (rectangle),various assignment operators(rectangle), and HALT (rectangle).
Nesting of these structures insideassignment-blocks results incomplex diagrams (cf. Tausworthe1977:100, 114).
Chaitin: " ... a program is 'elegant,' by which I meanthat it's the smallest possible program for producing theoutput that it does"[44]Chaitin prefaces his definition with: "I'll show you can't prove that aprogram is 'elegant' "—such a proof would solve the Haltingproblem (ibid).
Algorithm versus function computable by an algorithm: For a givenfunction multiple algorithms may exist. This is true, even withoutexpanding the available instruction set available to the programmer.
Rogers observes that "It is ... important to distinguish between thenotion of algorithm, i.e. procedure and the notion of functioncomputable by algorithm, i.e. mapping yielded by procedure. Thesame function may have several different algorithms".[45]Unfortunately, there may be a tradeoff between goodness (speed)and elegance (compactness)—an elegant program may take moresteps to complete a computation than one less elegant. An examplethat uses Euclid's algorithm appears below.
Computers (and computors), models of computation: A computer(or human "computer"[46]) is a restricted type of machine, a"discrete deterministic mechanical device"[47] that blindly followsits instructions.[48] Melzak's and Lambek's primitive models[49]reduced this notion to four elements: (i) discrete, distinguishablelocations, (ii) discrete, indistinguishable counters[50] (iii) an agent,and (iv) a list of instructions that are effective relative to thecapability of the agent.[51]Minsky describes a more congenial variation of Lambek's "abacus"model in his "Very Simple Bases for Computability".[52] Minsky'smachine proceeds sequentially through its five (or six, dependingon how one counts) instructions unless either a conditional IF-THEN GOTO or an unconditional GOTO changes program flowout of sequence. Besides HALT, Minsky's machine includes threeassignment (replacement, substitution)[53] operations: ZERO (e.g.
the contents of location replaced by 0: L ← 0), SUCCESSOR (e.g.
L ← L+1), and DECREMENT (e.g. L ← L − 1).[54] Rarely must aprogrammer write "code" with such a limited instruction set. ButMinsky shows (as do Melzak and Lambek) that his machine isTuring complete with only four general types of instructions:conditional GOTO, unconditional GOTO,assignment/replacement/substitution, and HALT. However, a fewdifferent assignment instructions (e.g. DECREMENT,INCREMENT, and ZERO/CLEAR/EMPTY for a Minskymachine) are also required for Turing-completeness; their exactspecification is somewhat up to the designer. The unconditionalGOTO is convenient; it can be constructed by initializing adedicated location to zero e.g. the instruction " Z ← 0 "; thereafterthe instruction IF Z=0 THEN GOTO xxx is unconditional.
Simulation of an algorithm: computer (computor) language: Knuth advises the reader that "the best way tolearn an algorithm is to try it . . . immediately take pen and paper and work through an example".[55] Butwhat about a simulation or execution of the real thing? The programmer must translate the algorithm into alanguage that the simulator/computer/computor can effectively execute. Stone gives an example of this:when computing the roots of a quadratic equation the computer must know how to take a square root. Ifthey don't, then the algorithm, to be effective, must provide a set of rules for extracting a square root.[56]This means that the programmer must know a "language" that is effective relative to the target computingagent (computer/computor).
But what model should be used for the simulation? Van Emde Boas observes "even if we base complexitytheory on abstract instead of concrete machines, the arbitrariness of the choice of a model remains. It is atthis point that the notion of simulation enters".[57] When speed is being measured, the instruction setmatters. For example, the subprogram in Euclid's algorithm to compute the remainder would execute muchfaster if the programmer had a "modulus" instruction available rather than just subtraction (or worse: justMinsky's "decrement").
Structured programming, canonical structures: Per the Church–Turing thesis, any algorithm can becomputed by a model known to be Turing complete, and per Minsky's demonstrations, Turing completenessrequires only four instruction types—conditional GOTO, unconditional GOTO, assignment, HALT.
Kemeny and Kurtz observe that, while "undisciplined" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in "spaghetti code", a programmer can write structured programs using onlythese instructions; on the other hand "it is also possible, and not too hard, to write badly structured programsin a structured language".[58] Tausworthe augments the three Böhm-Jacopini canonical structures:[59]SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.[60] Anadditional benefit of a structured program is that it lends itself to proofs of correctness using mathematicalinduction.[61]Canonical flowchart symbols[62]: The graphical aide called a flowchart offers a way to describe anddocument an algorithm (and a computer program corresponding to it). Like the program flow of a Minskymachine, a flowchart always starts at the top of a page and proceeds down. Its primary symbols are onlyfour: the directed arrow showing program flow, the rectangle (SEQUENCE, GOTO), the diamond (IF-THEN-ELSE), and the dot (OR-tie). The Böhm–Jacopini canonical structures are made of these primitiveshapes. Sub-structures can "nest" in rectangles, but only if a single exit occurs from the superstructure. Thesymbols and their use to build the canonical structures are shown in the diagram.
One of the simplest algorithms is to find the largest number in a list of numbers of random order. Findingthe solution requires looking at every number in the list. From this follows a simple algorithm, which can bestated in a high-level description in English prose, as:High-level description:1. If there are no numbers in the set, then there is no highest number.
2. Assume the first number in the set is the largest number in the set.
3. For each remaining number in the set: if this number is larger than the current largestnumber, consider this number to be the largest number in the set.
ExamplesAlgorithm example4. When there are no numbers left in the set to iterate over, consider the current largest numberto be the largest number of the set.
(Quasi-)formal description: Written in prose but much closer to the high-level language of a computerprogram, the following is the more formal coding of the algorithm in pseudocode or pidgin code:Algorithm LargestNumberInput: A list of numbers L.
Output: The largest number in the list L.
if L.size = 0 return nulllargest ← L[0]for each item in L, do    if item > largest, then        largest ← itemreturn largest"←" denotes assignment. For instance, "largest ← item" means that the value of largest changes tothe value of item.
"return" terminates the algorithm and outputs the following value.
In mathematics, the Euclidean algorithm or Euclid's algorithm, is an efficient method for computing thegreatest common divisor (GCD) of two integers (numbers), the largest number that divides them bothwithout a remainder. It is named after the ancient Greek mathematician Euclid, who first described it in hisElements (c. 300 BC).[63] It is one of the oldest algorithms in common use. It can be used to reducefractions to their simplest form, and is a part of many other number-theoretic and cryptographic calculations.
Euclid poses the problem thus: "Given two numbers not prime to one another, to find their greatest commonmeasure". He defines "A number [to be] a multitude composed of units": a counting number, a positiveinteger not including zero. To "measure" is to place a shorter measuring length s successively (q times)along longer length l until the remaining portion r is less than the shorter length s.[64] In modern words,remainder r = l − q×s, q being the quotient, or remainder r is the "modulus", the integer-fractional part leftover after the division.[65]For Euclid's method to succeed, the starting lengths must satisfy two requirements: (i) the lengths must notbe zero, AND (ii) the subtraction must be "proper"; i.e., a test must guarantee that the smaller of the twonumbers is subtracted from the larger (or the two can be equal so their subtraction yields zero).
Euclid's original proof adds a third requirement: the two lengths must not be prime to one another. Euclidstipulated this so that he could construct a reductio ad absurdum proof that the two numbers' commonmeasure is in fact the greatest.[66] While Nicomachus' algorithm is the same as Euclid's, when the numbersare prime to one another, it yields the number "1" for their common measure. So, to be precise, thefollowing is really Nicomachus' algorithm.
Only a few instruction types are required to execute Euclid's algorithm—some logical tests (conditionalGOTO), unconditional GOTO, assignment (replacement), and subtraction.
Euclid's algorithmComputer language for Euclid's algorithmThe example-diagram of Euclid's algorithmfrom T.L. Heath (1908), with more detailadded. Euclid does not go beyond a thirdmeasuring and gives no numericalexamples. Nicomachus gives the exampleof 49 and 21: "I subtract the less from thegreater; 28 is left; then again I subtractfrom this the same 21 (for this ispossible); 7 is left; I subtract this from 21,14 is left; from which I again subtract 7(for this is possible); 7 is left, but 7 cannotbe subtracted from 7." Heath commentsthat "The last phrase is curious, but themeaning of it is obvious enough, as alsothe meaning of the phrase about ending 'atone and the same number'."(Heath1908:300).
A graphical expression of Euclid's algorithm to find thegreatest common divisor for 1599 and 650Alocation is symbolized by upper case letter(s), e.g. S, A,etc.
The varying quantity (number) in a location is written inlower case letter(s) and (usually) associated with thelocation's name. For example, location L at the startmight contain the number l = 3009.
The following algorithm is framed as Knuth's four-step versionof Euclid's and Nicomachus', but, rather than using division tofind the remainder, it uses successive subtractions of the shorterlength s from the remaining length r until r is less than s. The high-level description, shown in boldface, isadapted from Knuth 1973:2–4:INPUT:1 [Into two locations L and S put the numbers l and s that represent the two lengths]:INPUT L, S2 [Initialize R: make the remaining length r equal to the starting/initial/input length l]:R ← LE0: [Ensure r ≥ s.]3 [Ensure the smaller of the two numbers is in S and the larger in R]:IF R > S THENthe contents of L is the larger number so skip over the exchange-steps 4, 5 and 6:GOTO step 7ELSEswap the contents of R and S.
4 L ← R (this first step is redundant, but is useful for later discussion).
5 R ← S6 S ← L 1599 = 650×2 + 299 650 = 299×2 + 52 299 = 52×5 + 39 52 = 39×1 + 13 39 = 13×3 + 0An inelegant program for Euclid's algorithm"Inelegant" is a translationof Knuth's version of thealgorithm with asubtraction-basedremainder-loop replacinghis use of division (or a"modulus" instruction).
Derived from Knuth1973:2–4. Depending onthe two numbers"Inelegant" may computethe g.c.d. in fewer stepsthan "Elegant".
E1: [Find remainder]: Until the remaining length r in R is less than theshorter length s in S, repeatedly subtract the measuring number s in S fromthe remaining length r in R.
7 IF S > R THENdone measuring soGOTO 10ELSEmeasure again,8 R ← R − S9 [Remainder-loop]:GOTO 7.
E2: [Is the remainder zero?]: EITHER (i) the last measure was exact, theremainder in R is zero, and the program can halt, OR (ii) the algorithm mustcontinue: the last measure left a remainder in R less than measuring numberin S.
10 IF R = 0 THENdone soGOTO step 15ELSECONTINUE TO step 11,E3: [Interchange s and r]: The nut of Euclid's algorithm. Use remainder rto measure what was previously smaller number s; L serves as a temporarylocation.
11 L ← R12 R ← S13 S ← L14 [Repeat the measuring process]:GOTO 7OUTPUT:15 [Done. S contains the greatest common divisor]:PRINT SDONE:16 HALT, END, STOP.
The following version of Euclid's algorithm requires only six core instructions to do what thirteen arerequired to do by "Inelegant"; worse, "Inelegant" requires more types of instructions.  The flowchart of"Elegant" can be found at the top of this article. In the (unstructured) Basic language, the steps arenumbered, and the instruction LET [] = [] is the assignment instruction symbolized by ←.
An elegant program for Euclid's algorithm  5 REM Euclid's algorithm for greatest common divisor  6 PRINT "Type two integers greater than 0"  10 INPUT A,B  20 IF B=0 THEN GOTO 80How "Elegant" works: In place of an outer "Euclid loop", "Elegant" shifts back and forth between two "co-loops", an A > B loop that computes A ← A − B, and a B ≤ A loop that computes B ← B − A. This worksbecause, when at last the minuend M is less than or equal to the subtrahend S (Difference = Minuend −Subtrahend), the minuend can become s (the new measuring length) and the subtrahend can become thenew r (the length to be measured); in other words the "sense" of the subtraction reverses.
The following version can be used with programming languages from the C-family:Does an algorithm do what its author wants it to do? A few test cases usually give some confidence in thecore functionality. But tests are not enough. For test cases, one source[67] uses 3009 and 884. Knuthsuggested 40902, 24140. Another interesting case is the two relatively prime numbers 14157 and 5950.
But "exceptional cases"[68] must be identified and tested. Will "Inelegant" perform properly when R > S, S> R, R = S? Ditto for "Elegant": B > A, A > B, A = B? (Yes to all). What happens when one number iszero, both numbers are zero? ("Inelegant" computes forever in all cases; "Elegant" computes forever whenA = 0.) What happens if negative numbers are entered? Fractional numbers? If the input numbers, i.e. thedomain of the function computed by the algorithm/program, is to include only positive integers includingzero, then the failures at zero indicate that the algorithm (and the program that instantiates it) is a partialfunction rather than a total function. A notable failure due to exceptions is the Ariane 5 Flight 501 rocketfailure (June 4, 1996).
Proof of program correctness by use of mathematical induction: Knuth demonstrates the application ofmathematical induction to an "extended" version of Euclid's algorithm, and he proposes "a general methodapplicable to proving the validity of any algorithm".[69] Tausworthe proposes that a measure of thecomplexity of a program be the length of its correctness proof.[70]Elegance (compactness) versus goodness (speed): With only six core instructions, "Elegant" is the clearwinner, compared to "Inelegant" at thirteen instructions. However, "Inelegant" is faster (it arrives at HALTin fewer steps). Algorithm analysis[71] indicates why this is the case: "Elegant" does two conditional tests in  30 IF A > B THEN GOTO 60  40 LET B=B-A  50 GOTO 20  60 LET A=A-B  70 GOTO 20  80 PRINT A  90 END// Euclid's algorithm for greatest common divisorint euclidAlgorithm (int A, int B) {     A = abs(A);     B = abs(B);     while (B != 0) {          while (A > B) {               A = A-B;          }          B = B-A;     }     return A;}Testing the Euclid algorithmsMeasuring and improving the Euclid algorithmsevery subtraction loop, whereas "Inelegant" only does one. As the algorithm (usually) requires many loop-throughs, on average much time is wasted doing a "B = 0?" test that is needed only after the remainder iscomputed.
Can the algorithms be improved?: Once the programmer judges a program "fit" and "effective"—that is, itcomputes the function intended by its author—then the question becomes, can it be improved?
The compactness of "Inelegant" can be improved by the elimination of five steps. But Chaitin proved thatcompacting an algorithm cannot be automated by a generalized algorithm;[72] rather, it can only be doneheuristically; i.e., by exhaustive search (examples to be found at Busy beaver), trial and error, cleverness,insight, application of inductive reasoning, etc. Observe that steps 4, 5 and 6 are repeated in steps 11, 12and 13. Comparison with "Elegant" provides a hint that these steps, together with steps 2 and 3, can beeliminated. This reduces the number of core instructions from thirteen to eight, which makes it "moreelegant" than "Elegant", at nine steps.
The speed of "Elegant" can be improved by moving the "B=0?" test outside of the two subtraction loops.
This change calls for the addition of three instructions (B = 0?, A = 0?, GOTO). Now "Elegant" computesthe example-numbers faster; whether this is always the case for any given A, B, and R, S would require adetailed analysis.
It is frequently important to know how much of a particular resource (such as time or storage) istheoretically required for a given algorithm. Methods have been developed for the analysis of algorithms toobtain such quantitative answers (estimates); for example, an algorithm which adds up the elements of a listof n numbers would have a time requirement of O(n), using big O notation. At all times the algorithm onlyneeds to remember two values: the sum of all the elements so far, and its current position in the input list.
Therefore, it is said to have a space requirement of O(1), if the space required to store the input numbers isnot counted, or O(n) if it is counted.
Different algorithms may complete the same task with a different set of instructions in less or more time,space, or 'effort' than others. For example, a binary search algorithm (with cost O(log n)) outperforms asequential search (cost O(n) ) when used for table lookups on sorted lists or arrays.
The analysis, and study of algorithms is a discipline of computer science, and is often practiced abstractlywithout the use of a specific programming language or implementation. In this sense, algorithm analysisresembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm andnot on the specifics of any particular implementation. Usually pseudocode is used for analysis as it is thesimplest and most general representation. However, ultimately, most algorithms are usually implemented onparticular hardware/software platforms and their algorithmic efficiency is eventually put to the test using realcode. For the solution of a "one off" problem, the efficiency of a particular algorithm may not havesignificant consequences (unless n is extremely large) but for algorithms designed for fast interactive,commercial or long life scientific usage it may be critical. Scaling from small n to large n frequently exposesinefficient algorithms that are otherwise benign.
Algorithmic analysisFormal versus empiricalRecursive C implementation ofEuclid's algorithm from the aboveflowchartEmpirical testing is useful because it may uncover unexpected interactions that affect performance.
Benchmarks may be used to compare before/after potential improvements to an algorithm after programoptimization. Empirical tests cannot replace formal analysis, though, and are not trivial to perform in a fairmanner.[73]To illustrate the potential improvements possible even in well-established algorithms, a recent significantinnovation, relating to FFT algorithms (used heavily in the field of image processing), can decreaseprocessing time up to 1,000 times for applications like medical imaging.[74] In general, speed improvementsdepend on special properties of the problem, which are very common in practical applications.[75] Speedupsof this magnitude enable computing devices that make extensive use of image processing (like digitalcameras and medical equipment) to consume less power.
There are various ways to classify algorithms, each with its own merits.
One way to classify algorithms is by implementation means.
RecursionA recursive algorithm is one that invokes (makesreference to) itself repeatedly until a certaincondition (also known as termination condition)matches, which is a method common to functionalprogramming. Iterative algorithms use repetitiveconstructs like loops and sometimes additional datastructures like stacks to solve the given problems.
Some problems are naturally suited for oneimplementation or the other. For example, towers ofHanoi is well understood using recursiveimplementation. Every recursive version has anequivalent (but possibly more or less complex) iterative version, and vice versa.
LogicalAn algorithm may be viewed as controlled logical deduction. This notion may beexpressed as: Algorithm = logic + control.[76] The logic component expresses the axiomsthat may be used in the computation and the control component determines the way inwhich deduction is applied to the axioms. This is the basis for the logic programmingparadigm. In pure logic programming languages, the control component is fixed andalgorithms are specified by supplying only the logic component. The appeal of thisapproach is the elegant semantics: a change in the axioms produces a well-definedchange in the algorithm.
Serial, parallel or distributedAlgorithms are usually discussed with the assumption that computers execute oneinstruction of an algorithm at a time. Those computers are sometimes called serialcomputers. An algorithm designed for such an environment is called a serial algorithm, asopposed to parallel algorithms or distributed algorithms. Parallel algorithms are algorithmsthat take advantage of computer architectures where multiple processors can work on aproblem at the same time. Distributed algorithms are algorithms that use multiple machinesExecution efficiencyClassificationBy implementationint gcd(int A, int B) {    if (B == 0)        return A;    else if (A > B)        return gcd(A-B,B);    else        return gcd(A,B-A);}connected with a computer network. Parallel and distributed algorithms divide the probleminto more symmetrical or asymmetrical subproblems and collect the results back together.
For example, a CPU would be an example of a parallel algorithm. The resourceconsumption in such algorithms is not only processor cycles on each processor but alsothe communication overhead between the processors. Some sorting algorithms can beparallelized efficiently, but their communication overhead is expensive. Iterative algorithmsare generally parallelizable, but some problems have no parallel algorithms and are calledinherently serial problems.
Deterministic or non-deterministicDeterministic algorithms solve the problem with exact decision at every step of thealgorithm whereas non-deterministic algorithms solve problems via guessing althoughtypical guesses are made more accurate through the use of heuristics.
Exact or approximateWhile many algorithms reach an exact solution, approximation algorithms seek anapproximation that is closer to the true solution. The approximation can be reached byeither using a deterministic or a random strategy. Such algorithms have practical value formany hard problems. One of the examples of an approximate algorithm is the Knapsackproblem, where there is a set of given items. Its goal is to pack the knapsack to get themaximum total value. Each item has some weight and some value. Total weight that canbe carried is no more than some fixed number X. So, the solution must consider weights ofitems as well as their value.[77]Quantum algorithmThey run on a realistic model of quantum computation. The term is usually used for thosealgorithms which seem inherently quantum, or use some essential feature of Quantumcomputing such as quantum superposition or quantum entanglement.
Another way of classifying algorithms is by their design methodology or paradigm. There is a certainnumber of paradigms, each different from the other. Furthermore, each of these categories includes manydifferent types of algorithms. Some common paradigms are:Brute-force or exhaustive searchBrute force is a method of problem-solving that involves systematically trying everypossible option until the optimal solution is found. This approach can be very timeconsuming, as it requires going through every possible combination of variables. However,it is often used when other methods are not available or too complex. Brute force can beused to solve a variety of problems, including finding the shortest path between two pointsand cracking passwords.
Divide and conquerA divide-and-conquer algorithm repeatedly reduces an instance of a problem to one ormore smaller instances of the same problem (usually recursively) until the instances aresmall enough to solve easily. One such example of divide and conquer is merge sorting.
Sorting can be done on each segment of data after dividing data into segments and sortingof entire data can be obtained in the conquer phase by merging the segments. A simplervariant of divide and conquer is called a decrease-and-conquer algorithm, which solves anidentical subproblem and uses the solution of this subproblem to solve the bigger problem.
Divide and conquer divides the problem into multiple subproblems and so the conquerstage is more complex than decrease and conquer algorithms. An example of a decreaseand conquer algorithm is the binary search algorithm.
Search and enumerationMany problems (such as playing chess) can be modeled as problems on graphs. A graphexploration algorithm specifies rules for moving around a graph and is useful for suchBy design paradigmproblems. This category also includes search algorithms, branch and bound enumerationand backtracking.
Randomized algorithmSuch algorithms make some choices randomly (or pseudo-randomly). They can be veryuseful in finding approximate solutions for problems where finding exact solutions can beimpractical (see heuristic method below). For some of these problems, it is known that thefastest approximations must involve some randomness.[78] Whether randomizedalgorithms with polynomial time complexity can be the fastest algorithms for someproblems is an open question known as the P versus NP problem. There are two largeclasses of such algorithms:1. Monte Carlo algorithms return a correct answer with high-probability. E.g. RP is the subclassof these that run in polynomial time.
2. Las Vegas algorithms always return the correct answer, but their running time is onlyprobabilistically bound, e.g. ZPP.
Reduction of complexityThis technique involves solving a difficult problem by transforming it into a better-knownproblem for which we have (hopefully) asymptotically optimal algorithms. The goal is tofind a reducing algorithm whose complexity is not dominated by the resulting reducedalgorithm's. For example, one selection algorithm for finding the median in an unsorted listinvolves first sorting the list (the expensive portion) and then pulling out the middle elementin the sorted list (the cheap portion). This technique is also known as transform andconquer.
Back trackingIn this approach, multiple solutions are built incrementally and abandoned when it isdetermined that they cannot lead to a valid full solution.
For optimization problems there is a more specific classification of algorithms; an algorithm for suchproblems may fall into one or more of the general categories described above as well as into one of thefollowing:Linear programmingWhen searching for optimal solutions to a linear function bound to linear equality andinequality constraints, the constraints of the problem can be used directly in producing theoptimal solutions. There are algorithms that can solve any problem in this category, suchas the popular simplex algorithm.[79] Problems that can be solved with linear programminginclude the maximum flow problem for directed graphs. If a problem additionally requiresthat one or more of the unknowns must be an integer then it is classified in integerprogramming. A linear programming algorithm can solve such a problem if it can be provedthat all restrictions for integer values are superficial, i.e., the solutions satisfy theserestrictions anyway. In the general case, a specialized algorithm or an algorithm that findsapproximate solutions is used, depending on the difficulty of the problem.
Dynamic programmingWhen a problem shows optimal substructures—meaning the optimal solution to a problemcan be constructed from optimal solutions to subproblems—and overlapping subproblems,meaning the same subproblems are used to solve many different problem instances, aquicker approach called dynamic programming avoids recomputing solutions that havealready been computed. For example, Floyd–Warshall algorithm, the shortest path to agoal from a vertex in a weighted graph can be found by using the shortest path to the goalfrom all adjacent vertices. Dynamic programming and memoization go together. The maindifference between dynamic programming and divide and conquer is that subproblems areOptimization problemsmore or less independent in divide and conquer, whereas subproblems overlap in dynamicprogramming. The difference between dynamic programming and straightforwardrecursion is in caching or memoization of recursive calls. When subproblems areindependent and there is no repetition, memoization does not help; hence dynamicprogramming is not a solution for all complex problems. By using memoization ormaintaining a table of subproblems already solved, dynamic programming reduces theexponential nature of many problems to polynomial complexity.
The greedy methodA greedy algorithm is similar to a dynamic programming algorithm in that it works byexamining substructures, in this case not of the problem but of a given solution. Suchalgorithms start with some solution, which may be given or have been constructed in someway, and improve it by making small modifications. For some problems they can find theoptimal solution while for others they stop at local optima, that is, at solutions that cannotbe improved by the algorithm but are not optimum. The most popular use of greedyalgorithms is for finding the minimal spanning tree where finding the optimal solution ispossible with this method. Huffman Tree, Kruskal, Prim, Sollin are greedy algorithms thatcan solve this optimization problem.
The heuristic methodIn optimization problems, heuristic algorithms can be used to find a solution close to theoptimal solution in cases where finding the optimal solution is impractical. Thesealgorithms work by getting closer and closer to the optimal solution as they progress. Inprinciple, if run for an infinite amount of time, they will find the optimal solution. Their meritis that they can find a solution very close to the optimal solution in a relatively short time.
Such algorithms include local search, tabu search, simulated annealing, and geneticalgorithms. Some of them, like simulated annealing, are non-deterministic algorithms whileothers, like tabu search, are deterministic. When a bound on the error of the non-optimalsolution is known, the algorithm is further categorized as an approximation algorithm.
Every field of science has its own problems and needs efficient algorithms. Related problems in one fieldare often studied together. Some example classes are search algorithms, sorting algorithms, mergealgorithms, numerical algorithms, graph algorithms, string algorithms, computational geometric algorithms,combinatorial algorithms, medical algorithms, machine learning, cryptography, data compression algorithmsand parsing techniques.
Fields tend to overlap with each other, and algorithm advances in one field may improve those of other,sometimes completely unrelated, fields. For example, dynamic programming was invented for optimizationof resource consumption in industry but is now used in solving a broad range of problems in many fields.
Algorithms can be classified by the amount of time they need to complete compared to their input size:Constant time: if the time needed by the algorithm is the same, regardless of the input size.
E.g. an access to an array element.
Logarithmic time: if the time is a logarithmic function of the input size. E.g. binary searchalgorithm.
Linear time: if the time is proportional to the input size. E.g. the traverse of a list.
Polynomial time: if the time is a power of the input size. E.g. the bubble sort algorithm hasquadratic time complexity.
By field of studyBy complexityExponential time: if the time is an exponential function of the input size. E.g. Brute-forcesearch.
Some problems may have multiple algorithms of differing complexity, while other problems might have noalgorithms or no known efficient algorithms. There are also mappings from some problems to otherproblems. Owing to this, it was found to be more suitable to classify the problems themselves instead of thealgorithms into equivalence classes based on the complexity of the best possible algorithms for them.
The adjective "continuous" when applied to the word "algorithm" can mean:An algorithm operating on data that represents continuous quantities, even though this datais represented by discrete approximations—such algorithms are studied in numericalanalysis; orAn algorithm in the form of a differential equation that operates continuously on the data,running on an analog computer.[80]Algorithms, by themselves, are not usually patentable. In the United States, a claim consisting solely ofsimple manipulations of abstract concepts, numbers, or signals does not constitute "processes" (USPTO2006), and hence algorithms are not patentable (as in Gottschalk v. Benson). However practical applicationsof algorithms are sometimes patentable. For example, in Diamond v. Diehr, the application of a simplefeedback algorithm to aid in the curing of synthetic rubber was deemed patentable. The patenting ofsoftware is highly controversial, and there are highly criticized patents involving algorithms, especially datacompression algorithms, such as Unisys' LZW patent.
Additionally, some cryptographic algorithms have export restrictions (see export of cryptography).
The earliest evidence of algorithms is found in the Babylonian mathematics of ancient Mesopotamia(modern Iraq). A Sumerian clay tablet found in Shuruppak near Baghdad and dated to circa 2500 BCdescribed the earliest division algorithm.[11] During the Hammurabi dynasty circa 1800-1600 BC,Babylonian clay tablets described algorithms for computing formulas.[81] Algorithms were also used inBabylonian astronomy. Babylonian clay tablets describe and employ algorithmic procedures to compute thetime and place of significant astronomical events.[82]Continuous algorithmsLegal issuesHistory: Development of the notion of "algorithm"Ancient Near EastAlgorithms for arithmetic are also found in ancient Egyptian mathematics, dating back to the RhindMathematical Papyrus circa 1550 BC.[11] Algorithms were later used in ancient Hellenistic mathematics.
Two examples are the Sieve of Eratosthenes, which was described in the Introduction to Arithmetic byNicomachus,[83][12]: Ch 9.2  and the Euclidean algorithm, which was first described in Euclid's Elements(c. 300 BC).[12]: Ch 9.1 Tally-marks: To keep track of their flocks, their sacks of grain and their money the ancients used tallying:accumulating stones or marks scratched on sticks or making discrete symbols in clay. Through theBabylonian and Egyptian use of marks and symbols, eventually Roman numerals and the abacus evolved(Dilson, p. 16–41). Tally marks appear prominently in unary numeral system arithmetic used in Turingmachine and Post–Turing machine computations.
Muhammad ibn Mūsā al-Khwārizmī, a Persian mathematician, wrote the Al-jabr in the 9th century. Theterms "algorism" and "algorithm" are derived from the name al-Khwārizmī, while the term "algebra" isderived from the book Al-jabr. In Europe, the word "algorithm" was originally used to refer to the sets ofrules and techniques used by Al-Khwarizmi to solve algebraic equations, before later being generalized torefer to any set of rules or techniques.[84] This eventually culminated in Leibniz's notion of the calculusratiocinator (c. 1680):A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebrathat would specify the rules for manipulating logical concepts in the manner that ordinaryalgebra specifies the rules for manipulating numbers.[85]The first cryptographic algorithm for deciphering encrypted code was developed by Al-Kindi, a 9th-centuryArab mathematician, in A Manuscript On Deciphering Cryptographic Messages. He gave the firstdescription of cryptanalysis by frequency analysis, the earliest codebreaking algorithm.[13]The clock: Bolter credits the invention of the weight-driven clock as "The key invention [of Europe in theMiddle Ages]", in particular, the verge escapement[86] that provides us with the tick and tock of amechanical clock. "The accurate automatic machine"[87] led immediately to "mechanical automata"beginning in the 13th century and finally to "computational machines"—the difference engine andanalytical engines of Charles Babbage and Countess Ada Lovelace, mid-19th century.[88] Lovelace iscredited with the first creation of an algorithm intended for processing on a computer—Babbage's analyticalengine, the first device considered a real Turing-complete computer instead of just a calculator—and issometimes called "history's first programmer" as a result, though a full implementation of Babbage's seconddevice would not be realized until decades after her lifetime.
Discrete and distinguishable symbolsManipulation of symbols as "place holders" for numbers: algebraCryptographic algorithmsMechanical contrivances with discrete statesLogical machines 1870 – Stanley Jevons' "logical abacus" and "logical machine": The technical problemwas to reduce Boolean equations when presented in a form similar to what is now known as Karnaughmaps. Jevons (1880) describes first a simple "abacus" of "slips of wood furnished with pins, contrived sothat any part or class of the [logical] combinations can be picked out mechanically ... More recently,however, I have reduced the system to a completely mechanical form, and have thus embodied the whole ofthe indirect process of inference in what may be called a Logical Machine" His machine came equippedwith "certain moveable wooden rods" and "at the foot are 21 keys like those of a piano [etc.] ...". With thismachine he could analyze a "syllogism or any other simple logical argument".[89]This machine he displayed in 1870 before the Fellows of the Royal Society.[90] Another logician JohnVenn, however, in his 1881 Symbolic Logic, turned a jaundiced eye to this effort: "I have no high estimatemyself of the interest or importance of what are sometimes called logical machines ... it does not seem to methat any contrivances at present known or likely to be discovered really deserve the name of logicalmachines"; see more at Algorithm characterizations. But not to be outdone he too presented "a plansomewhat analogous, I apprehend, to Prof. Jevon's abacus ... [And] [a]gain, corresponding to Prof.
Jevons's logical machine, the following contrivance may be described. I prefer to call it merely a logical-diagram machine ... but I suppose that it could do very completely all that can be rationally expected of anylogical machine".[91]Jacquard loom, Hollerith punch cards, telegraphy and telephony – the electromechanical relay: Bell andNewell (1971) indicate that the Jacquard loom (1801), precursor to Hollerith cards (punch cards, 1887), and"telephone switching technologies" were the roots of a tree leading to the development of the firstcomputers.[92] By the mid-19th century the telegraph, the precursor of the telephone, was in use throughoutthe world, its discrete and distinguishable encoding of letters as "dots and dashes" a common sound. By thelate 19th century the ticker tape (c. 1870s) was in use, as was the use of Hollerith cards in the 1890 U.S.
census. Then came the teleprinter (c. 1910) with its punched-paper use of Baudot code on tape.
Telephone-switching networks of electromechanical relays (invented 1835) was behind the work of GeorgeStibitz (1937), the inventor of the digital adding device. As he worked in Bell Laboratories, he observed the"burdensome' use of mechanical calculators with gears. "He went home one evening in 1937 intending totest his idea... When the tinkering was over, Stibitz had constructed a binary adding device".[93]The mathematician Martin Davis observes the particular importance of the electromechanical relay (with itstwo "binary states" open and closed):It was only with the development, beginning in the 1930s, of electromechanical calculatorsusing electrical relays, that machines were built having the scope Babbage hadenvisioned."[94]Symbols and rules: In rapid succession, the mathematics of George Boole (1847, 1854), Gottlob Frege(1879), and Giuseppe Peano (1888–1889) reduced arithmetic to a sequence of symbols manipulated byrules. Peano's The principles of arithmetic, presented by a new method (1888) was "the first attempt at anaxiomatization of mathematics in a symbolic language".[95]But Heijenoort gives Frege (1879) this kudos: Frege's is "perhaps the most important single work everwritten in logic. ... in which we see a " 'formula language', that is a lingua characterica, a language writtenwith special symbols, "for pure thought", that is, free from rhetorical embellishments ... constructed fromspecific symbols that are manipulated according to definite rules".[96] The work of Frege was furthersimplified and amplified by Alfred North Whitehead and Bertrand Russell in their Principia Mathematica(1910–1913).
Mathematics during the 19th century up to the mid-20th centuryThe paradoxes: At the same time a number of disturbing paradoxes appeared in the literature, in particular,the Burali-Forti paradox (1897), the Russell paradox (1902–03), and the Richard Paradox.[97] The resultantconsiderations led to Kurt Gödel's paper (1931)—he specifically cites the paradox of the liar—thatcompletely reduces rules of recursion to numbers.
Effective calculability: In an effort to solve the Entscheidungsproblem defined precisely by Hilbert in 1928,mathematicians first set about to define what was meant by an "effective method" or "effective calculation"or "effective calculability" (i.e., a calculation that would succeed). In rapid succession the followingappeared: Alonzo Church, Stephen Kleene and J.B. Rosser's λ-calculus[98] a finely honed definition of"general recursion" from the work of Gödel acting on suggestions of Jacques Herbrand (cf. Gödel'sPrinceton lectures of 1934) and subsequent simplifications by Kleene.[99] Church's proof[100] that theEntscheidungsproblem was unsolvable, Emil Post's definition of effective calculability as a workermindlessly following a list of instructions to move left or right through a sequence of rooms and while thereeither mark or erase a paper or observe the paper and make a yes-no decision about the nextinstruction.[101] Alan Turing's proof of that the Entscheidungsproblem was unsolvable by use of his "a-[automatic-] machine"[102]—in effect almost identical to Post's "formulation", J. Barkley Rosser's definitionof "effective method" in terms of "a machine".[103] Kleene's proposal of a precursor to "Church thesis" thathe called "Thesis I",[104] and a few years later Kleene's renaming his Thesis "Church's Thesis"[105] andproposing "Turing's Thesis".[106]Emil Post (1936) described the actions of a "computer" (human being) as follows:"...two concepts are involved: that of a symbol space in which the work leading fromproblem to answer is to be carried out, and a fixed unalterable set of directions.
His symbol space would be"a two-way infinite sequence of spaces or boxes... The problem solver or worker is to moveand work in this symbol space, being capable of being in, and operating in but one box ata time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked,and having a single mark in it, say a vertical stroke.
"One box is to be singled out and called the starting point. ...a specific problem is to begiven in symbolic form by a finite number of boxes [i.e., INPUT] being marked with astroke. Likewise, the answer [i.e., OUTPUT] is to be given in symbolic form by such aconfiguration of marked boxes...
"A set of directions applicable to a general problem sets up a deterministic process whenapplied to each specific problem. This process terminates only when it comes to thedirection of type (C ) [i.e., STOP]".[107] See more at Post–Turing machineAlan Turing's work[108] preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work ofTuring. Turing's biographer believed that Turing's use of a typewriter-like model derived from a youthfulinterest: "Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter, and he couldwell have begun by asking himself what was meant by calling a typewriter 'mechanical' ".[109] Given theprevalence at the time of Morse code, telegraphy, ticker tape machines, and teletypewriters, it is quitepossible that all were influences on Turing during his youth.
Emil Post (1936) and Alan Turing (1936–37, 1939)Alan Turing's statue at BletchleyParkTuring—his model of computation is now called a Turing machine—begins, as did Post, with an analysis of a human computer that hewhittles down to a simple set of basic motions and "states of mind".
But he continues a step further and creates a machine as a model ofcomputation of numbers.[110]"Computing is normally done by writing certain symbolson paper. We may suppose this paper is divided intosquares like a child's arithmetic book...I assume then thatthe computation is carried out on one-dimensional paper,i.e., on a tape divided into squares. I shall also supposethat the number of symbols which may be printed isfinite...
"The behavior of the computer at any moment is determined by the symbols which he isobserving, and his "state of mind" at that moment. We may suppose that there is a bound Bto the number of symbols or squares that the computer can observe at one moment. If hewishes to observe more, he must use successive observations. We will also suppose thatthe number of states of mind which need be taken into account is finite...
"Let us imagine that the operations performed by the computer to be split up into 'simpleoperations' which are so elementary that it is not easy to imagine them further divided."[111]Turing's reduction yields the following:"The simple operations must therefore include:"(a) Changes of the symbol on one of the observed squares"(b) Changes of one of the squares observed to another square within L squares ofone of the previously observed squares.
"It may be that some of these change necessarily invoke a change of state of mind. The most general singleoperation must, therefore, be taken to be one of the following:"(A) A possible change (a) of symbol together with a possible change of state ofmind.
"(B) A possible change (b) of observed squares, together with a possible change ofstate of mind""We may now construct a machine to do the work of this computer."[111]A few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:"A function is said to be "effectively calculable" if its values can be found by some purelymechanical process. Though it is fairly easy to get an intuitive grasp of this idea, it isnevertheless desirable to have some more definite, mathematical expressible definition ...
[he discusses the history of the definition pretty much as presented above with respect toGödel, Herbrand, Kleene, Church, Turing, and Post] ... We may take this statement literally,understanding by a purely mechanical process one which could be carried out by amachine. It is possible to give a mathematical description, in a certain normal form, of thestructures of these machines. The development of these ideas leads to the author'sdefinition of a computable function, and to an identification of computability † with effectivecalculability...
"† We shall use the expression "computable function" to mean a function calculableby a machine, and we let "effectively calculable" refer to the intuitive idea withoutparticular identification with any one of these definitions".[112]J. Barkley Rosser defined an "effective [mathematical] method" in the following manner (italicizationadded):" 'Effective method' is used here in the rather special sense of a method each step of whichis precisely determined and which is certain to produce the answer in a finite number ofsteps. With this special meaning, three different precise definitions have been given todate. [his footnote #5; see discussion immediately below]. The simplest of these to state(due to Post and Turing) says essentially that an effective method of solving certain sets ofproblems exists if one can build a machine which will then solve any problem of the setwith no human intervention beyond inserting the question and (later) reading the answer.
All three definitions are equivalent, so it doesn't matter which one is used. Moreover, thefact that all three are equivalent is a very strong argument for the correctness of any one."(Rosser 1939:225–226)Rosser's footnote No. 5 references the work of (1) Church and Kleene and their definition of λ-definability,in particular, Church's use of it in his An Unsolvable Problem of Elementary Number Theory (1936); (2)Herbrand and Gödel and their use of recursion, in particular, Gödel's use in his famous paper On FormallyUndecidable Propositions of Principia Mathematica and Related Systems I (1931); and (3) Post (1936) andTuring (1936–37) in their mechanism-models of computation.
Stephen C. Kleene defined as his now-famous "Thesis I" known as the Church–Turing thesis. But he didthis in the following context (boldface in original):"12. Algorithmic theories... In setting up a complete algorithmic theory, what we do is todescribe a procedure, performable for each set of values of the independent variables,which procedure necessarily terminates and in such manner that from the outcome we canread a definite answer, "yes" or "no," to the question, "is the predicate value true?""(Kleene 1943:273)A number of efforts have been directed toward further refinement of the definition of "algorithm", andactivity is on-going because of issues surrounding, in particular, foundations of mathematics (especially theChurch–Turing thesis) and philosophy of mind (especially arguments about artificial intelligence). Formore, see Algorithm characterizations.
MathematicsportalAbstract machineALGOLAlgorithm engineeringAlgorithm characterizationsAlgorithmic biasAlgorithmic compositionJ. B. Rosser (1939) and S. C. Kleene (1943)History after 1950See alsoAlgorithmic entitiesAlgorithmic synthesisAlgorithmic techniqueAlgorithmic topologyGarbage in, garbage outIntroduction to Algorithms (textbook)Government by algorithmList of algorithmsList of algorithm general topicsList of important publications in theoretical computer science – AlgorithmsRegulation of algorithmsTheory of computationComputability theoryComputational complexity theoryComputational mathematics1. "Definition of ALGORITHM" (https://www.merriam-webster.com/dictionary/algorithm).
Merriam-Webster Online Dictionary. Archived (https://web.archive.org/web/20200214074446/https://www.merriam-webster.com/dictionary/algorithm) from the original on February 14,2020. Retrieved November 14, 2019.
2. Blair, Ann, Duguid, Paul, Goeing, Anja-Silvia and Grafton, Anthony. Information: A HistoricalCompanion, Princeton: Princeton University Press, 2021. p. 2473. David A. Grossman, Ophir Frieder, Information Retrieval: Algorithms and Heuristics, 2ndedition, 2004, ISBN 14020300454. "Any classical mathematical algorithm, for example, can be described in a finite number ofEnglish words" (Rogers 1987:2).
5. Well defined with respect to the agent that executes the algorithm: "There is a computingagent, usually human, which can react to the instructions and carry out the computations"(Rogers 1987:2).
6. "an algorithm is a procedure for computing a function (with respect to some chosen notationfor integers) ... this limitation (to numerical functions) results in no loss of generality", (Rogers1987:1).
7. "An algorithm has zero or more inputs, i.e., quantities which are given to it initially before thealgorithm begins" (Knuth 1973:5).
8. "A procedure which has all the characteristics of an algorithm except that it possibly lacksfiniteness may be called a 'computational method'" (Knuth 1973:5).
9. "An algorithm has one or more outputs, i.e. quantities which have a specified relation to theinputs" (Knuth 1973:5).
10. Whether or not a process with random interior processes (not including the input) is analgorithm is debatable. Rogers opines that: "a computation is carried out in a discretestepwise fashion, without the use of continuous methods or analogue devices ... carriedforward deterministically, without resort to random methods or devices, e.g., dice" (Rogers1987:2).
11. Chabert, Jean-Luc (2012). A History of Algorithms: From the Pebble to the Microchip.
Springer Science & Business Media. pp. 7–8. ISBN 9783642181924.
Notes12. Cooke, Roger L. (2005). The History of Mathematics: A Brief Course. John Wiley & Sons.
ISBN 978-1-118-46029-0.
13. Dooley, John F. (2013). A Brief History of Cryptology and Cryptographic Algorithms. SpringerScience & Business Media. pp. 12–3. ISBN 9783319016283.
14. "Al-Khwarizmi biography" (http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html). www-history.mcs.st-andrews.ac.uk. Archived (https://web.archive.org/web/20190802091553/http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html) from theoriginal on August 2, 2019. Retrieved May 3, 2017.
15. "Etymology of algorithm" (http://chambers.co.uk/search/?query=algorithm&title=21st).
Chambers Dictionary. Archived (https://web.archive.org/web/20190331204600/https://chambers.co.uk/search/?query=algorithm&title=21st) from the original on March 31, 2019.
Retrieved December 13, 2016.
16. "algorithm (n.)" (https://www.etymonline.com/word/algorithm). Online Etymology Dictionary.
Retrieved November 12, 2022.
17. https://www.britannica.com/science/algorithm18. Hogendijk, Jan P. (1998). "al-Khwarzimi" (https://web.archive.org/web/20090412193516/http://www.kennislink.nl/web/show?id=116543). Pythagoras. 38 (2): 4–5. Archived from theoriginal (http://www.kennislink.nl/web/show?id=116543) on April 12, 2009.
19. Oaks, Jeffrey A. "Was al-Khwarizmi an applied algebraist?" (https://web.archive.org/web/20110718094835/http://facstaff.uindy.edu/~oaks/MHMC.htm). University of Indianapolis.
Archived from the original (http://facstaff.uindy.edu/~oaks/MHMC.htm) on July 18, 2011.
Retrieved May 30, 2008.
20. Brezina, Corona (2006). Al-Khwarizmi: The Inventor Of Algebra (https://books.google.com/books?id=955jPgAACAAJ). The Rosen Publishing Group. ISBN 978-1-4042-0513-0.
21. Foremost mathematical texts in history (http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html) Archived (https://web.archive.org/web/20110609224820/http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html) June 9, 2011, at the WaybackMachine, according to Carl B. Boyer.
22. "algorismic" (https://www.thefreedictionary.com/algorismic), The Free Dictionary, archived (https://web.archive.org/web/20191221200124/https://www.thefreedictionary.com/algorismic)from the original on December 21, 2019, retrieved November 14, 201923. Oxford English Dictionary, Third Edition, 2012 s.v. (http://www.oed.com/view/Entry/4959)24. Sriram, M. S. (2005). "Algorithms in Indian Mathematics" (https://books.google.com/books?id=qfJdDwAAQBAJ&pg=PA153). In Emch, Gerard G.; Sridharan, R.; Srinivas, M. D. (eds.).
Contributions to the History of Indian Mathematics. Springer. p. 153. ISBN 978-93-86279-25-5.
25. Mehri, Bahman (2017). "From Al-Khwarizmi to Algorithm". Olympiads in Informatics. 11 (2):71–74. doi:10.15388/ioi.2017.special.11 (https://doi.org/10.15388%2Fioi.2017.special.11).
26. "Abu Jafar Muhammad ibn Musa al-Khwarizmi" (http://members.peak.org/~jeremy/calculators/alKwarizmi.html). members.peak.org. Archived (https://web.archive.org/web/20190821232118/http://members.peak.org/~jeremy/calculators/alKwarizmi.html) from the original onAugust 21, 2019. Retrieved November 14, 2019.
27. Kleene 1943 in Davis 1965:27428. Rosser 1939 in Davis 1965:22529. Stone 1973:430. Simanowski, Roberto (2018). The Death Algorithm and Other Digital Dilemmas (https://books.google.com/books?id=RJV5DwAAQBAJ). Untimely Meditations. Vol. 14. Translated byChase, Jefferson. Cambridge, Massachusetts: MIT Press. p. 147. ISBN 9780262536370.
Archived (https://web.archive.org/web/20191222120705/https://books.google.com/books?id=RJV5DwAAQBAJ) from the original on December 22, 2019. Retrieved May 27, 2019. "[...]the next level of abstraction of central bureaucracy: globally operating algorithms."31. Dietrich, Eric (1999). "Algorithm". In Wilson, Robert Andrew; Keil, Frank C. (eds.). The MITEncyclopedia of the Cognitive Sciences (https://books.google.com/books?id=-wt1aZrGXLYC). MIT Cognet library. Cambridge, Massachusetts: MIT Press (published 2001). p. 11.
ISBN 9780262731447. Retrieved July 22, 2020. "An algorithm is a recipe, method, ortechnique for doing something."32. Stone requires that "it must terminate in a finite number of steps" (Stone 1973:7–8).
33. Boolos and Jeffrey 1974,1999:1934. cf Stone 1972:535. Knuth 1973:7 states: "In practice, we not only want algorithms, but we also want goodalgorithms ... one criterion of goodness is the length of time taken to perform the algorithm ...
other criteria are the adaptability of the algorithm to computers, its simplicity, and elegance,etc."36. cf Stone 1973:637. Stone 1973:7–8 states that there must be, "...a procedure that a robot [i.e., computer] canfollow in order to determine precisely how to obey the instruction". Stone adds finiteness ofthe process, and definiteness (having no ambiguity in the instructions) to this definition.
38. Knuth, loc. cit39. Minsky 1967, p. 10540. Gurevich 2000:1, 341. Sipser 2006:15742. Goodrich, Michael T.; Tamassia, Roberto (2002), Algorithm Design: Foundations, Analysis,and Internet Examples (http://ww3.algorithmdesign.net/ch00-front.html), John Wiley & Sons,Inc., ISBN 978-0-471-38365-9, archived (https://web.archive.org/web/20150428201622/http://ww3.algorithmdesign.net/ch00-front.html) from the original on April 28, 2015, retrievedJune 14, 201843. Knuth 1973:744. Chaitin 2005:3245. Rogers 1987:1–246. In his essay "Calculations by Man and Machine: Conceptual Analysis" Seig 2002:390credits this distinction to Robin Gandy, cf Wilfred Seig, et al., 2002 Reflections on thefoundations of mathematics: Essays in honor of Solomon Feferman, Association forSymbolic Logic, A.K. Peters Ltd, Natick, MA.
47. cf Gandy 1980:126, Robin Gandy Church's Thesis and Principles for Mechanisms appearingon pp. 123–148 in J. Barwise et al. 1980 The Kleene Symposium, North-Holland PublishingCompany.
48. A "robot": "A computer is a robot that performs any task that can be described as a sequenceof instructions." cf Stone 1972:349. Lambek's "abacus" is a "countably infinite number of locations (holes, wires, etc.) togetherwith an unlimited supply of counters (pebbles, beads, etc.). The locations aredistinguishable, the counters are not". The holes have unlimited capacity, and standing by isan agent who understands and is able to carry out the list of instructions" (Lambek1961:295). Lambek references Melzak who defines his Q-machine as "an indefinitely largenumber of locations ... an indefinitely large supply of counters distributed among theselocations, a program, and an operator whose sole purpose is to carry out the program"(Melzak 1961:283). B-B-J (loc. cit.) add the stipulation that the holes are "capable of holdingany number of stones" (p. 46). Both Melzak and Lambek appear in The CanadianMathematical Bulletin, vol. 4, no. 3, September 1961.
50. If no confusion results, the word "counters" can be dropped, and a location can be said tocontain a single "number".
51. "We say that an instruction is effective if there is a procedure that the robot can follow inorder to determine precisely how to obey the instruction." (Stone 1972:6)52. cf Minsky 1967: Chapter 11 "Computer models" and Chapter 14 "Very Simple Bases forComputability" pp. 255–281, in particular,53. cf Knuth 1973:3.
54. But always preceded by IF-THEN to avoid improper subtraction.
55. Knuth 1973:456. Stone 1972:5. Methods for extracting roots are not trivial: see Methods of computing squareroots.
57. Leeuwen, Jan (1990). Handbook of Theoretical Computer Science: Algorithms andcomplexity. Volume A (https://books.google.com/books?id=-X39_rA3VSQC). Elsevier. p. 85.
ISBN 978-0-444-88071-0.
58. John G. Kemeny and Thomas E. Kurtz 1985 Back to Basic: The History, Corruption, andFuture of the Language, Addison-Wesley Publishing Company, Inc. Reading, MA, ISBN 0-201-13433-0.
59. Tausworthe 1977:10160. Tausworthe 1977:14261. Knuth 1973 section 1.2.1, expanded by Tausworthe 1977 at pages 100ff and Chapter 9.162. cf Tausworthe 197763. Heath 1908:300; Hawking's Dover 2005 edition derives from Heath.
64. " 'Let CD, measuring BF, leave FA less than itself.' This is a neat abbreviation for saying,measure along BA successive lengths equal to CD until a point F is reached such that thelength FA remaining is less than CD; in other words, let BF be the largest exact multiple ofCD contained in BA" (Heath 1908:297)65. For modern treatments using division in the algorithm, see Hardy and Wright 1979:180,Knuth 1973:2 (Volume 1), plus more discussion of Euclid's algorithm in Knuth 1969:293–297(Volume 2).
66. Euclid covers this question in his Proposition 1.
67. "Euclid's Elements, Book VII, Proposition 2" (http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html). Aleph0.clarku.edu. Archived (https://web.archive.org/web/20120524074919/http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html) from theoriginal on May 24, 2012. Retrieved May 20, 2012.
68. While this notion is in widespread use, it cannot be defined precisely.
69. Knuth 1973:13–18. He credits "the formulation of algorithm-proving in terms of assertionsand induction" to R W. Floyd, Peter Naur, C.A.R. Hoare, H.H. Goldstine and J. vonNeumann. Tausworth 1977 borrows Knuth's Euclid example and extends Knuth's method insection 9.1 Formal Proofs (pp. 288–298).
70. Tausworthe 1997:29471. cf Knuth 1973:7 (Vol. I), and his more-detailed analyses on pp. 1969:294–313 (Vol II).
72. Breakdown occurs when an algorithm tries to compact itself. Success would solve theHalting problem.
73. Kriegel, Hans-Peter; Schubert, Erich; Zimek, Arthur (2016). "The (black) art of run-timeevaluation: Are we comparing algorithms or implementations?". Knowledge and InformationSystems. 52 (2): 341–378. doi:10.1007/s10115-016-1004-2 (https://doi.org/10.1007%2Fs10115-016-1004-2). ISSN 0219-1377 (https://www.worldcat.org/issn/0219-1377).
S2CID 40772241 (https://api.semanticscholar.org/CorpusID:40772241).
74. Gillian Conahan (January 2013). "Better Math Makes Faster Data Networks" (http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks).
discovermagazine.com. Archived (https://web.archive.org/web/20140513212427/http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks) from the originalon May 13, 2014. Retrieved May 13, 2014.
75. Haitham Hassanieh, Piotr Indyk, Dina Katabi, and Eric Price, "ACM-SIAM Symposium OnDiscrete Algorithms (SODA) (http://siam.omnibooksonline.com/2012SODA/data/papers/500.
pdf) Archived (https://web.archive.org/web/20130704180806/http://siam.omnibooksonline.com/2012SODA/data/papers/500.pdf) July 4, 2013, at the Wayback Machine, Kyoto, January2012. See also the sFFT Web Page (http://groups.csail.mit.edu/netmit/sFFT/) Archived (https://web.archive.org/web/20120221145740/http://groups.csail.mit.edu/netmit/sFFT/) February21, 2012, at the Wayback Machine.
76. Kowalski 197977. Kellerer, Hans; Pferschy, Ulrich; Pisinger, David (2004). Knapsack Problems | Hans Kellerer| Springer (https://www.springer.com/us/book/9783540402862). Springer. doi:10.1007/978-3-540-24777-7 (https://doi.org/10.1007%2F978-3-540-24777-7). ISBN 978-3-540-40286-2.
S2CID 28836720 (https://api.semanticscholar.org/CorpusID:28836720). Archived (https://web.archive.org/web/20171018181055/https://www.springer.com/us/book/9783540402862)from the original on October 18, 2017. Retrieved September 19, 2017.
78. For instance, the volume of a convex polytope (described using a membership oracle) canbe approximated to high accuracy by a randomized polynomial time algorithm, but not by adeterministic one: see Dyer, Martin; Frieze, Alan; Kannan, Ravi (January 1991), "A RandomPolynomial-time Algorithm for Approximating the Volume of Convex Bodies", J. ACM, 38 (1):1–17, CiteSeerX 10.1.1.145.4600 (https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.
1.145.4600), doi:10.1145/102782.102783 (https://doi.org/10.1145%2F102782.102783),S2CID 13268711 (https://api.semanticscholar.org/CorpusID:13268711).
79. George B. Dantzig and Mukund N. Thapa. 2003. Linear Programming 2: Theory andExtensions. Springer-Verlag.
80. Tsypkin (1971). Adaptation and learning in automatic systems (https://books.google.com/books?id=sgDHJlafMskC&pg=PA54). Academic Press. p. 54. ISBN 978-0-08-095582-7.
81. Knuth, Donald E. (1972). "Ancient Babylonian Algorithms" (https://web.archive.org/web/20121224100137/http://steiner.math.nthu.edu.tw/disk5/js/computer/1.pdf) (PDF). Commun. ACM.
15 (7): 671–677. doi:10.1145/361454.361514 (https://doi.org/10.1145%2F361454.361514).
ISSN 0001-0782 (https://www.worldcat.org/issn/0001-0782). S2CID 7829945 (https://api.semanticscholar.org/CorpusID:7829945). Archived from the original (http://steiner.math.nthu.edu.tw/disk5/js/computer/1.pdf) (PDF) on December 24, 2012.
82. Aaboe, Asger (2001), Episodes from the Early History of Astronomy, New York: Springer,pp. 40–62, ISBN 978-0-387-95136-283. Ast, Courtney. "Eratosthenes" (http://www.math.wichita.edu/history/men/eratosthenes.html).
Wichita State University: Department of Mathematics and Statistics. Archived (https://web.archive.org/web/20150227150653/http://www.math.wichita.edu/history/men/eratosthenes.html)from the original on February 27, 2015. Retrieved February 27, 2015.
84. Chabert, Jean-Luc (2012). A History of Algorithms: From the Pebble to the Microchip.
Springer Science & Business Media. p. 2. ISBN 9783642181924.
85. Davis 2000:1886. Bolter 1984:2487. Bolter 1984:2688. Bolter 1984:33–34, 204–206.
89. All quotes from W. Stanley Jevons 1880 Elementary Lessons in Logic: Deductive andInductive, Macmillan and Co., London and New York. Republished as a googlebook; cfJevons 1880:199–201. Louis Couturat 1914 the Algebra of Logic, The Open CourtPublishing Company, Chicago and London. Republished as a googlebook; cf Couturat1914:75–76 gives a few more details; he compares this to a typewriter as well as a piano.
Jevons states that the account is to be found at January 20, 1870 The Proceedings of theRoyal Society.
90. Jevons 1880:199–20091. All quotes from John Venn 1881 Symbolic Logic, Macmillan and Co., London. Republishedas a googlebook. cf Venn 1881:120–125. The interested reader can find a deeperexplanation in those pages.
92. Bell and Newell diagram 1971:39, cf. Davis 200093. * Melina Hill, Valley News Correspondent, A Tinkerer Gets a Place in History, Valley NewsWest Lebanon NH, Thursday, March 31, 1983, p. 13.
94. Davis 2000:1495. van Heijenoort 1967:81ff96. van Heijenoort's commentary on Frege's Begriffsschrift, a formula language, modeled uponthat of arithmetic, for pure thought in van Heijenoort 1967:197. Dixon 1906, cf. Kleene 1952:36–4098. cf. footnote in Alonzo Church 1936a in Davis 1965:90 and 1936b in Davis 1965:11099. Kleene 1935–6 in Davis 1965:237ff, Kleene 1943 in Davis 1965:255ff100. Church 1936 in Davis 1965:88ff101. cf. "Finite Combinatory Processes – formulation 1", Post 1936 in Davis 1965:289–290102. Turing 1936–37 in Davis 1965:116ff103. Rosser 1939 in Davis 1965:226104. Kleene 1943 in Davis 1965:273–274105. Kleene 1952:300, 317106. Kleene 1952:376107. Turing 1936–37 in Davis 1965:289–290108. Turing 1936 in Davis 1965, Turing 1939 in Davis 1965:160109. Hodges, p. 96110. Turing 1936–37:116111. Turing 1936–37 in Davis 1965:136112. Turing 1939 in Davis 1965:160BibliographyAxt, P (1959). "On a Subrecursive Hierarchy and Primitive Recursive Degrees" (https://doi.org/10.2307%2F1993169). Transactions of the American Mathematical Society. 92 (1): 85–105. doi:10.2307/1993169 (https://doi.org/10.2307%2F1993169). JSTOR 1993169 (https://www.jstor.org/stable/1993169).
Bell, C. Gordon and Newell, Allen (1971), Computer Structures: Readings and Examples,McGraw–Hill Book Company, New York. ISBN 0-07-004357-4.
Blass, Andreas; Gurevich, Yuri (2003). "Algorithms: A Quest for Absolute Definitions" (http://research.microsoft.com/~gurevich/Opera/164.pdf) (PDF). Bulletin of European Association forTheoretical Computer Science. 81. Archived (https://ghostarchive.org/archive/20221009/http://research.microsoft.com/~gurevich/Opera/164.pdf) (PDF) from the original on October 9,2022. Includes an excellent bibliography of 56 references.
Bolter, David J. (1984). Turing's Man: Western Culture in the Computer Age (1984 ed.).
Chapel Hill, NC: The University of North Carolina Press. ISBN 978-0-8078-1564-9., ISBN 0-8078-4108-0Boolos, George; Jeffrey, Richard (1999) [1974]. Computability and Logic (https://archive.org/details/computabilitylog0000bool_r8y9) (4th ed.). Cambridge University Press, London.
ISBN 978-0-521-20402-6.: cf. Chapter 3 Turing machines where they discuss "certainenumerable sets not effectively (mechanically) enumerable".
Burgin, Mark (2004). Super-Recursive Algorithms. Springer. ISBN 978-0-387-95569-8.
Campagnolo, M.L., Moore, C., and Costa, J.F. (2000) An analog characterization of thesubrecursive functions. In Proc. of the 4th Conference on Real Numbers and Computers,Odense University, pp. 91–109Church, Alonzo (1936). "An Unsolvable Problem of Elementary Number Theory". TheAmerican Journal of Mathematics. 58 (2): 345–363. doi:10.2307/2371045 (https://doi.org/10.
2307%2F2371045). JSTOR 2371045 (https://www.jstor.org/stable/2371045). Reprinted inThe Undecidable, p. 89ff. The first expression of "Church's Thesis". See in particular page100 (The Undecidable) where he defines the notion of "effective calculability" in terms of "analgorithm", and he uses the word "terminates", etc.
Church, Alonzo (1936). "A Note on the Entscheidungsproblem". The Journal of SymbolicLogic. 1 (1): 40–41. doi:10.2307/2269326 (https://doi.org/10.2307%2F2269326).
JSTOR 2269326 (https://www.jstor.org/stable/2269326). S2CID 42323521 (https://api.semanticscholar.org/CorpusID:42323521). Church, Alonzo (1936). "Correction to a Note on theEntscheidungsproblem". The Journal of Symbolic Logic. 1 (3): 101–102.
doi:10.2307/2269030 (https://doi.org/10.2307%2F2269030). JSTOR 2269030 (https://www.jstor.org/stable/2269030). S2CID 5557237 (https://api.semanticscholar.org/CorpusID:5557237). Reprinted in The Undecidable, p. 110ff. Church shows that the Entscheidungsproblem isunsolvable in about 3 pages of text and 3 pages of footnotes.
Daffa', Ali Abdullah al- (1977). The Muslim contribution to mathematics. London: CroomHelm. ISBN 978-0-85664-464-1.
Davis, Martin (1965). The Undecidable: Basic Papers On Undecidable Propositions,Unsolvable Problems and Computable Functions (https://archive.org/details/undecidablebasic0000davi). New York: Raven Press. ISBN 978-0-486-43228-1. Davis gives commentarybefore each article. Papers of Gödel, Alonzo Church, Turing, Rosser, Kleene, and Emil Postare included; those cited in the article are listed here by author's name.
Davis, Martin (2000). Engines of Logic: Mathematicians and the Origin of the Computer. NewYork: W.W. Nortion. ISBN 978-0-393-32229-3. Davis offers concise biographies of Leibniz,Boole, Frege, Cantor, Hilbert, Gödel and Turing with von Neumann as the show-stealingvillain. Very brief bios of Joseph-Marie Jacquard, Babbage, Ada Lovelace, Claude Shannon,Howard Aiken, etc.
 This article incorporates public domain material from Paul E. Black. "algorithm" (https://xlinux.nist.gov/dads/HTML/algorithm.html). Dictionary of Algorithms and Data Structures. NIST.
Dean, Tim (2012). "Evolution and moral diversity" (https://doi.org/10.4148%2Fbiyclc.v7i0.1775). Baltic International Yearbook of Cognition, Logic and Communication. 7.
doi:10.4148/biyclc.v7i0.1775 (https://doi.org/10.4148%2Fbiyclc.v7i0.1775).
Dennett, Daniel (1995). Darwin's Dangerous Idea (https://archive.org/details/darwinsdangerous0000denn). Complexity. Vol. 2. New York: Touchstone/Simon & Schuster. pp. 32 (https://archive.org/details/darwinsdangerous0000denn/page/32)–36. Bibcode:1996Cmplx...2a..32M(https://ui.adsabs.harvard.edu/abs/1996Cmplx...2a..32M). doi:10.1002/(SICI)1099-0526(199609/10)2:1<32::AID-CPLX8>3.0.CO;2-H (https://doi.org/10.1002%2F%28SICI%291099-0526%28199609%2F10%292%3A1%3C32%3A%3AAID-CPLX8%3E3.0.CO%3B2-H). ISBN 978-0-684-80290-9.
Dilson, Jesse (2007). The Abacus (https://archive.org/details/abacusworldsfirs0000dils)((1968, 1994) ed.). St. Martin's Press, NY. ISBN 978-0-312-10409-2., ISBN 0-312-10409-XYuri Gurevich, Sequential Abstract State Machines Capture Sequential Algorithms (http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.146.3017&rep=rep1&type=pdf), ACMTransactions on Computational Logic, Vol 1, no 1 (July 2000), pp. 77–111. Includesbibliography of 33 sources.
van Heijenoort, Jean (2001). From Frege to Gödel, A Source Book in Mathematical Logic,1879–1931 ((1967) ed.). Harvard University Press, Cambridge. ISBN 978-0-674-32449-7.,3rd edition 1976[?], ISBN 0-674-32449-8 (pbk.)Hodges, Andrew (1983). Alan Turing: The Enigma. Physics Today. Vol. 37. New York: Simonand Schuster. pp. 107–108. Bibcode:1984PhT....37k.107H (https://ui.adsabs.harvard.edu/abs/1984PhT....37k.107H). doi:10.1063/1.2915935 (https://doi.org/10.1063%2F1.2915935).
ISBN 978-0-671-49207-6., ISBN 0-671-49207-1. Cf. Chapter "The Spirit of Truth" for ahistory leading to, and a discussion of, his proof.
Kleene, Stephen C. (1936). "General Recursive Functions of Natural Numbers" (https://web.
archive.org/web/20140903092121/http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1). Mathematische Annalen. 112 (5): 727–742.
doi:10.1007/BF01565439 (https://doi.org/10.1007%2FBF01565439). S2CID 120517999 (https://api.semanticscholar.org/CorpusID:120517999). Archived from the original (http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1) on September 3,2014. Retrieved September 30, 2013. Presented to the American Mathematical Society,September 1935. Reprinted in The Undecidable, p. 237ff. Kleene's definition of "generalrecursion" (known now as mu-recursion) was used by Church in his 1935 paper AnUnsolvable Problem of Elementary Number Theory that proved the "decision problem" to be"undecidable" (i.e., a negative result).
Kleene, Stephen C. (1943). "Recursive Predicates and Quantifiers" (https://doi.org/10.2307%2F1990131). Transactions of the American Mathematical Society. 53 (1): 41–73.
doi:10.2307/1990131 (https://doi.org/10.2307%2F1990131). JSTOR 1990131 (https://www.jstor.org/stable/1990131). Reprinted in The Undecidable, p. 255ff. Kleene refined his definitionof "general recursion" and proceeded in his chapter "12. Algorithmic theories" to posit"Thesis I" (p. 274); he would later repeat this thesis (in Kleene 1952:300) and name it"Church's Thesis"(Kleene 1952:317) (i.e., the Church thesis).
Kleene, Stephen C. (1991) [1952]. Introduction to Metamathematics (Tenth ed.). North-Holland Publishing Company. ISBN 978-0-7204-2103-3.
Knuth, Donald (1997). Fundamental Algorithms, Third Edition. Reading, Massachusetts:Addison–Wesley. ISBN 978-0-201-89683-1.
Knuth, Donald (1969). Volume 2/Seminumerical Algorithms, The Art of ComputerProgramming First Edition. Reading, Massachusetts: Addison–Wesley.
Kosovsky, N.K. Elements of Mathematical Logic and its Application to the theory ofSubrecursive Algorithms, LSU Publ., Leningrad, 1981Kowalski, Robert (1979). "Algorithm=Logic+Control". Communications of the ACM. 22 (7):424–436. doi:10.1145/359131.359136 (https://doi.org/10.1145%2F359131.359136).
S2CID 2509896 (https://api.semanticscholar.org/CorpusID:2509896).
A.A. Markov (1954) Theory of algorithms. [Translated by Jacques J. Schorr-Kon and PSTstaff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, IsraelProgram for Scientific Translations, 1961; available from the Office of Technical Services,U.S. Dept. of Commerce, Washington] Description 444 p. 28 cm. Added t.p. in RussianTranslation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v. 42.
Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. ofCommerce, Office of Technical Services, number OTS 60-51085.]Minsky, Marvin (1967). Computation: Finite and Infinite Machines (https://archive.org/details/computationfinit0000mins) (First ed.). Prentice-Hall, Englewood Cliffs, NJ. ISBN 978-0-13-165449-5. Minsky expands his "...idea of an algorithm – an effective procedure..." in chapter5.1 Computability, Effective Procedures and Algorithms. Infinite machines.
Post, Emil (1936). "Finite Combinatory Processes, Formulation I". The Journal of SymbolicLogic. 1 (3): 103–105. doi:10.2307/2269031 (https://doi.org/10.2307%2F2269031).
JSTOR 2269031 (https://www.jstor.org/stable/2269031). S2CID 40284503 (https://api.semanticscholar.org/CorpusID:40284503). Reprinted in The Undecidable, pp. 289ff. Post defines asimple algorithmic-like process of a man writing marks or erasing marks and going from boxto box and eventually halting, as he follows a list of simple instructions. This is cited byKleene as one source of his "Thesis I", the so-called Church–Turing thesis.
Rogers, Hartley Jr. (1987). Theory of Recursive Functions and Effective Computability. TheMIT Press. ISBN 978-0-262-68052-3.
Rosser, J.B. (1939). "An Informal Exposition of Proofs of Godel's Theorem and Church'sTheorem". Journal of Symbolic Logic. 4 (2): 53–60. doi:10.2307/2269059 (https://doi.org/10.2307%2F2269059). JSTOR 2269059 (https://www.jstor.org/stable/2269059).
S2CID 39499392 (https://api.semanticscholar.org/CorpusID:39499392). Reprinted in TheUndecidable, p. 223ff. Herein is Rosser's famous definition of "effective method": "...amethod each step of which is precisely predetermined and which is certain to produce theanswer in a finite number of steps... a machine which will then solve any problem of the setwith no human intervention beyond inserting the question and (later) reading the answer"(p. 225–226, The Undecidable)Santos-Lang, Christopher (2014). "Moral Ecology Approaches to Machine Ethics" (http://grinfree.com/MoralEcology.pdf) (PDF). In van Rysewyk, Simon; Pontier, Matthijs (eds.). MachineMedical Ethics. Intelligent Systems, Control and Automation: Science and Engineering.
Vol. 74. Switzerland: Springer. pp. 111–127. doi:10.1007/978-3-319-08108-3_8 (https://doi.org/10.1007%2F978-3-319-08108-3_8). ISBN 978-3-319-08107-6. Archived (https://ghostarchive.org/archive/20221009/http://grinfree.com/MoralEcology.pdf) (PDF) from the original onOctober 9, 2022.
Scott, Michael L. (2009). Programming Language Pragmatics (3rd ed.). Morgan KaufmannPublishers/Elsevier. ISBN 978-0-12-374514-9.
Sipser, Michael (2006). Introduction to the Theory of Computation (https://archive.org/details/introductiontoth00sips). PWS Publishing Company. ISBN 978-0-534-94728-6.
Sober, Elliott; Wilson, David Sloan (1998). Unto Others: The Evolution and Psychology ofUnselfish Behavior (https://archive.org/details/untoothersevolut00sobe). Cambridge: HarvardUniversity Press. ISBN 9780674930469.
Stone, Harold S. (1972). Introduction to Computer Organization and Data Structures(1972 ed.). McGraw-Hill, New York. ISBN 978-0-07-061726-1. Cf. in particular the firstchapter titled: Algorithms, Turing Machines, and Programs. His succinct informal definition:"...any sequence of instructions that can be obeyed by a robot, is called an algorithm" (p. 4).
Tausworthe, Robert C (1977). Standardized Development of Computer Software Part 1Methods. Englewood Cliffs NJ: Prentice–Hall, Inc. ISBN 978-0-13-842195-3.
Turing, Alan M. (1936–37). "On Computable Numbers, With An Application to theEntscheidungsproblem". Proceedings of the London Mathematical Society. Series 2. 42:230–265. doi:10.1112/plms/s2-42.1.230 (https://doi.org/10.1112%2Fplms%2Fs2-42.1.230).
S2CID 73712 (https://api.semanticscholar.org/CorpusID:73712).. Corrections, ibid, vol.
43(1937) pp. 544–546. Reprinted in The Undecidable, p. 116ff. Turing's famous papercompleted as a Master's dissertation while at King's College Cambridge UK.
Turing, Alan M. (1939). "Systems of Logic Based on Ordinals". Proceedings of the LondonMathematical Society. 45: 161–228. doi:10.1112/plms/s2-45.1.161 (https://doi.org/10.1112%2Fplms%2Fs2-45.1.161). hdl:21.11116/0000-0001-91CE-3 (https://hdl.handle.net/21.11116%2F0000-0001-91CE-3). Reprinted in The Undecidable, pp. 155ff. Turing's paper thatdefined "the oracle" was his PhD thesis while at Princeton.
United States Patent and Trademark Office (2006), 2106.02 **>Mathematical Algorithms:2100 Patentability (http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm), Manual of Patent Examining Procedure (MPEP). Latest revision August 2006Bellah, Robert Neelly (1985). Habits of the Heart: Individualism and Commitment inAmerican Life (https://books.google.com/books?id=XsUojihVZQcC). Berkeley: University ofCalifornia Press. ISBN 978-0-520-25419-0.
Berlinski, David (2001). The Advent of the Algorithm: The 300-Year Journey from an Idea tothe Computer (https://archive.org/details/adventofalgorith0000berl). Harvest Books.
ISBN 978-0-15-601391-8.
Chabert, Jean-Luc (1999). A History of Algorithms: From the Pebble to the Microchip.
Springer Verlag. ISBN 978-3-540-63369-3.
Thomas H. Cormen; Charles E. Leiserson; Ronald L. Rivest; Clifford Stein (2009).
Introduction To Algorithms (3rd ed.). MIT Press. ISBN 978-0-262-03384-8.
Harel, David; Feldman, Yishai (2004). Algorithmics: The Spirit of Computing. Addison-Wesley. ISBN 978-0-321-11784-7.
Hertzke, Allen D.; McRorie, Chris (1998). "The Concept of Moral Ecology". In Lawler, PeterAugustine; McConkey, Dale (eds.). Community and Political Thought Today. Westport, CT:Praeger.
Knuth, Donald E. (2000). Selected Papers on Analysis of Algorithms (http://www-cs-faculty.stanford.edu/~uno/aa.html). Stanford, California: Center for the Study of Language andInformation.
Knuth, Donald E. (2010). Selected Papers on Design of Algorithms (http://www-cs-faculty.stanford.edu/~uno/da.html). Stanford, California: Center for the Study of Language andInformation.
Wallach, Wendell; Allen, Colin (November 2008). Moral Machines: Teaching Robots Rightfrom Wrong. US: Oxford University Press. ISBN 978-0-19-537404-9.
Further readingBleakley, Chris (2020). Poems that Solve Puzzles: The History and Science of Algorithms (https://books.google.com/books?id=3pr5DwAAQBAJ). Oxford University Press. ISBN 978-0-19-885373-2.
"Algorithm" (https://www.encyclopediaofmath.org/index.php?title=Algorithm), Encyclopediaof Mathematics, EMS Press, 2001 [1994]Algorithms (https://curlie.org/Computers/Algorithms/) at CurlieWeisstein, Eric W. "Algorithm" (https://mathworld.wolfram.com/Algorithm.html). MathWorld.
Dictionary of Algorithms and Data Structures (https://www.nist.gov/dads/) – National Instituteof Standards and TechnologyAlgorithm repositoriesThe Stony Brook Algorithm Repository (http://www.cs.sunysb.edu/~algorith/) – StateUniversity of New York at Stony BrookCollected Algorithms of the ACM (http://calgo.acm.org/) – Association for ComputingMachineryThe Stanford GraphBase (http://www-cs-staff.stanford.edu/~knuth/sgb.html) – StanfordUniversityRetrieved from "https://en.wikipedia.org/w/index.php?title=Algorithm&oldid=1134377890"External links