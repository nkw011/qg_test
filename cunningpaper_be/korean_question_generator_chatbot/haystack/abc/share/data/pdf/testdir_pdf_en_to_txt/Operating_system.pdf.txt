Operating systemAn operating system (OS) is system software that manages computer hardware, software resources, andprovides common services for computer programs.
Time-sharing operating systems schedule tasks for efficient use of the system and may also includeaccounting software for cost allocation of processor time, mass storage, printing, and other resources.
For hardware functions such as input and output and memory allocation, the operating system acts as anintermediary between programs and the computer hardware,[1][2] although the application code is usuallyexecuted directly by the hardware and frequently makes system calls to an OS function or is interrupted byit. Operating systems are found on many devices that contain a computer – from cellular phones and videogame consoles to web servers and supercomputers.
The dominant general-purpose personal computer operating system is Microsoft Windows with a marketshare of around 74.99%. macOS by Apple Inc. is in second place (14.84%), and the varieties of Linux arecollectively in third place (2.81%).[3] In the mobile sector (including smartphones and tablets), Android'sshare is 70.82% in the year 2020.[4] According to third quarter 2016 data, Android's share on smartphonesis dominant with 87.5 percent with a growth rate of 10.3 percent per year, followed by Apple's iOS with12.1 percent with per year decrease in market share of 5.2 percent, while other operating systems amount tojust 0.3 percent.[5] Linux distributions are dominant in the server and supercomputing sectors. Otherspecialized classes of operating systems (special-purpose operating systems),[6][7] such as embedded andreal-time systems, exist for many applications. Security-focused operating systems also exist. Someoperating systems have low system requirements (e.g. light-weight Linux distribution). Others may havehigher system requirements.
Some operating systems require installation or may come pre-installed with purchased computers (OEM-installation), whereas others may run directly from media (i.e. live CD) or flash memory (i.e. USB stick).
A single-tasking system can only run one program at a time, while a multi-tasking operating system allowsmore than one program to be running concurrently. This is achieved by time-sharing, where the availableprocessor time is divided between multiple processes. These processes are each interrupted repeatedly intime slices by a task-scheduling subsystem of the operating system. Multi-tasking may be characterized inpreemptive and cooperative types. In preemptive multitasking, the operating system slices the CPU time anddedicates a slot to each of the programs. Unix-like operating systems, such as Linux—as well as non-Unix-like, such as AmigaOS—support preemptive multitasking. Cooperative multitasking is achieved by relyingTypes of operating systemsSingle-tasking and multi-taskingon each process to provide time to the other processes in a defined manner. 16-bit versions of MicrosoftWindows used cooperative multi-tasking; 32-bit versions of both Windows NT and Win9x used preemptivemulti-tasking.
Single-user operating systems have no facilities to distinguish users but may allow multiple programs to runin tandem.[8] A multi-user operating system extends the basic concept of multi-tasking with facilities thatidentify processes and resources, such as disk space, belonging to multiple users, and the system permitsmultiple users to interact with the system at the same time. Time-sharing operating systems schedule tasksfor efficient use of the system and may also include accounting software for cost allocation of processortime, mass storage, printing, and other resources to multiple users.
A distributed operating system manages a group of distinct, networked computers and makes them appearto be a single computer, as all computations are distributed (divided amongst the constituent computers).[9]Embedded operating systems are designed to be used in embedded computer systems. They are designed tooperate on small machines with less autonomy (e.g. PDAs). They are very compact and extremely efficientby design and are able to operate with a limited amount of resources. Windows CE and Minix 3 are someexamples of embedded operating systems.
A real-time operating system is an operating system that guarantees to process events or data by a specificmoment in time. A real-time operating system may be single- or multi-tasking, but when multitasking, it usesspecialized scheduling algorithms so that a deterministic nature of behavior is achieved. Such an event-driven system switches between tasks based on their priorities or external events, whereas time-sharingoperating systems switch tasks based on clock interrupts.
A library operating system is one in which the services that a typical operating system provides, such asnetworking, are provided in the form of libraries and composed with the application and configuration codeto construct a unikernel: a specialized, single address space, machine image that can be deployed to cloud orembedded environments.
Early computers were built to perform a series of single tasks, like a calculator. Basic operating systemfeatures were developed in the 1950s, such as resident monitor functions that could automatically rundifferent programs in succession to speed up processing. Operating systems did not exist in their modernSingle- and multi-userDistributedEmbeddedReal-timeLibraryHistoryOS/360 was used on most IBMmainframe computers beginning in1966, including computers used bythe Apollo program.
and more complex forms until the early 1960s.[10] Hardware features were added, that enabled use ofruntime libraries, interrupts, and parallel processing. When personal computers became popular in the1980s, operating systems were made for them similar in concept to those used on larger computers.
In the 1940s, the earliest electronic digital systems had no operating systems. Electronic systems of this timewere programmed on rows of mechanical switches or by jumper wires on plugboards. These were special-purpose systems that, for example, generated ballistics tables for the military or controlled the printing ofpayroll checks from data on punched paper cards. After programmable general-purpose computers wereinvented, machine languages(consisting of strings of the binary digits 0 and 1 on punched paper tape) wereintroduced that sped up the programming process (Stern, 1981).
In the early 1950s, a computer could execute only one program at atime. Each user had sole use of the computer for a limited periodand would arrive at a scheduled time with their program and dataon punched paper cards or punched tape. The program would beloaded into the machine, and the machine would be set to workuntil the program completed or crashed. Programs could generallybe debugged via a front panel using toggle switches and panellights. It is said that Alan Turing was a master of this on the earlyManchester Mark 1 machine, and he was already deriving theprimitive conception of an operating system from the principles ofthe universal Turing machine.[10]Later machines came with libraries of programs, which would belinked to a user's program to assist in operations such as input andoutput and compiling (generating machine code from human-readable symbolic code). This was the genesis of the modern-dayoperating system. However, machines still ran a single job at a time.
At Cambridge University in England, the job queue was at one timea washing line (clothesline) from which tapes were hung withdifferent colored clothes-pegs to indicate job priority.
By the late 1950s, programs that one would recognize as anoperating system were beginning to appear. Often pointed to as the earliest recognizable example is GM-NAA I/O, released in 1956 on the IBM 704. The first known example that actually referred to itself was theSHARE Operating System, a development of GM-NAA I/O, released in 1959. In a May 1960 paperdescribing the system, George Ryckman noted:The development of computer operating systems have materially aided the problem of getting aprogram or series of programs on and off the computer efficiently.[11]One of the more famous examples that is often found in discussions of early systems is the Atlas Supervisor,running on the Atlas in 1962.[12] It was referred to as such in a December 1961 article describing thesystem, but the context of "the Operating System" is more along the lines of "the system operates in thefashion". The Atlas team itself used the term "supervisor",[13] which was widely used along with"monitor". Brinch Hansen described it as "the most significant breakthrough in the history of operatingsystems."[14]MainframesThrough the 1950s, many major features were pioneered in the field of operating systems on mainframecomputers, including batch processing, input/output interrupting, buffering, multitasking, spooling, runtimelibraries, link-loading, and programs for sorting records in files. These features were included or notincluded in application software at the option of application programmers, rather than in a separateoperating system used by all applications. In 1959, the SHARE Operating System was released as anintegrated utility for the IBM 704, and later in the 709 and 7090 mainframes, although it was quicklysupplanted by IBSYS/IBJOB on the 709, 7090 and 7094, which in turn influenced the later 7040-PR-150(7040/7044) and 1410-PR-155 (1410/7010) operating systems.
During the 1960s, IBM's OS/360 introduced the concept of a single OS spanning an entire product line,which was crucial for the success of the System/360 machines. IBM's current mainframe operating systemsare distant descendants of this original system and modern machines are backward compatible withapplications written for OS/360.
OS/360 also pioneered the concept that the operating system keeps track of all of the system resources thatare used, including program and data space allocation in main memory and file space in secondary storage,and file locking during updates. When a process is terminated for any reason, all of these resources are re-claimed by the operating system.
The alternative CP-67 system for the S/360-67 started a whole line of IBM operating systems focused onthe concept of virtual machines. Other operating systems used on IBM S/360 series mainframes includedsystems developed by IBM: DOS/360[a] (Disk Operating System), TSS/360 (Time Sharing System),TOS/360 (Tape Operating System), BOS/360 (Basic Operating System), and ACP (Airline ControlProgram), as well as a few non-IBM systems: MTS (Michigan Terminal System), MUSIC (Multi-UserSystem for Interactive Computing), and ORVYL (Stanford Timesharing System).
Control Data Corporation developed the SCOPE operating system in the 1960s, for batch processing. Incooperation with the University of Minnesota, the Kronos and later the NOS operating systems weredeveloped during the 1970s, which supported simultaneous batch and timesharing use. Like manycommercial timesharing systems, its interface was an extension of the Dartmouth BASIC operating systems,one of the pioneering efforts in timesharing and programming languages. In the late 1970s, Control Dataand the University of Illinois developed the PLATO operating system, which used plasma panel displaysand long-distance time sharing networks. Plato was remarkably innovative for its time, featuring real-timechat, and multi-user graphical games.
In 1961, Burroughs Corporation introduced the B5000 with the MCP (Master Control Program) operatingsystem. The B5000 was a stack machine designed to exclusively support high-level languages with noassembler;[b] indeed, the MCP was the first OS to be written exclusively in a high-level language (ESPOL,a dialect of ALGOL). MCP also introduced many other ground-breaking innovations, such as being the firstcommercial implementation of virtual memory. During development of the AS/400, IBM made an approachto Burroughs to license MCP to run on the AS/400 hardware. This proposal was declined by Burroughsmanagement to protect its existing hardware production. MCP is still in use today in the Unisys company'sMCP/ClearPath line of computers.
UNIVAC, the first commercial computer manufacturer, produced a series of EXEC operatingsystems.[15][16][17] Like all early main-frame systems, this batch-oriented system managed magnetic drums,disks, card readers and line printers. In the 1970s, UNIVAC produced the Real-Time Basic (RTB) systemto support large-scale time sharing, also patterned after the Dartmouth BC system.
General Electric developed General Electric Comprehensive Operating Supervisor (GECOS), whichprimarily supported batch processing. After its acquisition by Honeywell, it was renamed GeneralComprehensive Operating System (GCOS).
PC DOS was an early personal computerOS that featured a command-line interface.
Bell Labs,[c] General Electric and MIT developed Multiplexed Information and Computing Service(Multics), which introduced the concept of ringed security privilege levels.
Digital Equipment Corporation developed many operating systems for its various computer lines, includingTOPS-10 and TOPS-20 time-sharing systems for the 36-bit PDP-10 class systems. Before the widespreaduse of UNIX, TOPS-10 was a particularly popular system in universities, and in the early ARPANETcommunity. RT-11 was a single-user real-time OS for the PDP-11 class minicomputer, and RSX-11 was thecorresponding multi-user OS.
From the late 1960s through the late 1970s, several hardware capabilities evolved that allowed similar orported software to run on more than one system. Early systems had utilized microprogramming toimplement features on their systems in order to permit different underlying computer architectures to appearto be the same as others in a series. In fact, most 360s after the 360/40 (except the 360/44, 360/75, 360/91,360/95 and 360/195) were microprogrammed implementations.
The enormous investment in software for these systems made since the 1960s caused most of the originalcomputer manufacturers to continue to develop compatible operating systems along with the hardware.
Notable supported mainframe operating systems include:Burroughs MCP – B5000, 1961 to Unisys Clearpath/MCP, presentIBM OS/360 – IBM System/360, 1966 to IBM z/OS, presentIBM CP-67 – IBM System/360, 1967 to IBM z/VMUNIVAC EXEC 8 – UNIVAC 1108, 1967, to OS 2200 Unisys Clearpath Dorado, presentThe first microcomputers did not have the capacity or need forthe elaborate operating systems that had been developed formainframes and minis; minimalistic operating systems weredeveloped, often loaded from ROM and known as monitors.
One notable early disk operating system was CP/M, whichwas supported on many early microcomputers and wasclosely imitated by Microsoft's MS-DOS, which becamewidely popular as the operating system chosen for the IBMPC (IBM's version of it was called IBM DOS or PC DOS). Inthe 1980s, Apple Computer Inc. (now Apple Inc.) abandonedits popular Apple II series of microcomputers to introduce theApple Macintosh computer with an innovative graphical userinterface (GUI) to the Mac OS.
The introduction of the Intel 80386 CPU chip in October 1985,[18] with 32-bit architecture and pagingcapabilities, provided personal computers with the ability to run multitasking operating systems like those ofearlier minicomputers and mainframes. Microsoft responded to this progress by hiring Dave Cutler, whohad developed the VMS operating system for Digital Equipment Corporation. He would lead thedevelopment of the Windows NT operating system, which continues to serve as the basis for Microsoft'soperating systems line. Steve Jobs, a co-founder of Apple Inc., started NeXT Computer Inc., whichdeveloped the NEXTSTEP operating system. NEXTSTEP would later be acquired by Apple Inc. and used,along with code from FreeBSD as the core of Mac OS X (macOS after latest name change).
MicrocomputersMac OS by Apple Computer became thefirst widespread OS to feature a graphicaluser interface. Many of its features suchas windows and icons would later becomecommonplace in GUIs.
Evolution of Unix systemsThe GNU Project was started by activist and programmerRichard Stallman with the goal of creating a complete freesoftware replacement to the proprietary UNIX operatingsystem. While the project was highly successful in duplicatingthe functionality of various parts of UNIX, development ofthe GNU Hurd kernel proved to be unproductive. In 1991,Finnish computer science student Linus Torvalds, withcooperation from volunteers collaborating over the Internet,released the first version of the Linux kernel. It was soonmerged with the GNU user space components and systemsoftware to form a complete operating system. Since then, thecombination of the two major components has usually beenreferred to as simply "Linux" by the software industry, anaming convention that Stallman and the Free SoftwareFoundation remain opposed to, preferring the nameGNU/Linux. The Berkeley Software Distribution, known asBSD, is the UNIX derivative distributed by the University of California, Berkeley, starting in the 1970s.
Freely distributed and ported to many minicomputers, it eventually also gained a following for use on PCs,mainly as FreeBSD, NetBSD and OpenBSD.
Unix was originally written in assembly language.[19] KenThompson wrote B, mainly based on BCPL, based on hisexperience in the MULTICS project. B was replaced by C,and Unix, rewritten in C, developed into a large, complexfamily of inter-related operating systems which have beeninfluential in every modern operating system (see History).
The Unix-like family is a diverse group of operating systems,with several major sub-categories including System V, BSD,and Linux. The name "UNIX" is a trademark of The OpenGroup which licenses it for use with any operating system thathas been shown to conform to their definitions. "UNIX-like"is commonly used to refer to the large set of operating systems which resemble the original UNIX.
Unix-like systems run on a wide variety of computer architectures. They are used heavily for servers inbusiness, as well as workstations in academic and engineering environments. Free UNIX variants, such asLinux and BSD, are popular in these areas.
Five operating systems are certified by The Open Group (holder of the Unix trademark) as Unix. HP's HP-UX and IBM's AIX are both descendants of the original System V Unix and are designed to run only ontheir respective vendor's hardware. In contrast, Sun Microsystems's Solaris can run on multiple types ofhardware, including x86 and SPARC servers, and PCs. Apple's macOS, a replacement for Apple's earlier(non-Unix) classic Mac OS, is a hybrid kernel-based BSD variant derived from NeXTSTEP, Mach, andFreeBSD. IBM's z/OS UNIX System Services includes a shell and utilities based on Mortice Kerns'InterOpen products.
ExamplesUnix and Unix-like operating systemsThe first server for the World Wide Web ranon NeXTSTEP, based on BSD.
Unix interoperability was sought by establishing the POSIX standard. The POSIX standard can be appliedto any operating system, although it was originally created for various Unix variants.
A subgroup of the Unix family is the Berkeley SoftwareDistribution family, which includes FreeBSD, NetBSD, andOpenBSD. These operating systems are most commonlyfound on webservers, although they can also function as apersonal computer OS. The Internet owes much of itsexistence to BSD, as many of the protocols now commonlyused by computers to connect, send and receive data over anetwork were widely implemented and refined in BSD. TheWorld Wide Web was also first demonstrated on a number ofcomputers running an OS based on BSD called NeXTSTEP.
In 1974, University of California, Berkeley installed its firstUnix system. Over time, students and staff in the computerscience department there began adding new programs to makethings easier, such as text editors. When Berkeley received new VAX computers in 1978 with Unixinstalled, the school's undergraduates modified Unix even more in order to take advantage of the computer'shardware possibilities. The Defense Advanced Research Projects Agency of the US Department of Defensetook interest, and decided to fund the project. Many schools, corporations, and government organizationstook notice and started to use Berkeley's version of Unix instead of the official one distributed by AT&T.
Steve Jobs, upon leaving Apple Inc. in 1985, formed NeXT Inc., a company that manufactured high-endcomputers running on a variation of BSD called NeXTSTEP. One of these computers was used by TimBerners-Lee as the first webserver to create the World Wide Web.
Developers like Keith Bostic encouraged the project to replace any non-free code that originated with BellLabs. Once this was done, however, AT&T sued. After two years of legal disputes, the BSD projectspawned a number of free derivatives, such as NetBSD and FreeBSD (both in 1993), and OpenBSD (fromNetBSD in 1995).
macOS (formerly "Mac OS X" and later "OS X") is a line of open core graphical operating systemsdeveloped, marketed, and sold by Apple Inc., the latest of which is pre-loaded on all currently shippingMacintosh computers. macOS is the successor to the original classic Mac OS, which had been Apple'sprimary operating system since 1984. Unlike its predecessor, macOS is a UNIX operating system built ontechnology that had been developed at NeXT through the second half of the 1980s and up until Applepurchased the company in early 1997. The operating system was first released in 1999 as Mac OS X Server1.0, followed in March 2001 by a client version (Mac OS X v10.0 "Cheetah"). Since then, six more distinct"client" and "server" editions of macOS have been released, until the two were merged in OS X 10.7"Lion".
Prior to its merging with macOS, the server edition – macOS Server – was architecturally identical to itsdesktop counterpart and usually ran on Apple's line of Macintosh server hardware. macOS Server includedwork group management and administration software tools that provide simplified access to key networkservices, including a mail transfer agent, a Samba server, an LDAP server, a domain name server, andBSD and its descendantsmacOSUbuntu, desktop Linux distributionLinux, a Unix-like operating systemwas first time released on September17, 1991, by LinusTorvalds.[25][26][27] Picture of Tux thepenguin, mascot of Linux.[28]others. With Mac OS X v10.7 Lion, all server aspects of Mac OS X Server have been integrated into theclient version and the product re-branded as "OS X" (dropping "Mac" from the name). The server tools arenow offered as an application.[20]First introduced as the OpenEdition upgrade to MVS/ESA System Product Version 4 Release 3,announced[21] February 1993 with support for POSIX and other standards.[22][23][24] z/OS UNIX SystemServices is built on top of MVS services and cannot run independently. While IBM initially introducedOpenEdition to satisfy FIPS requirements, several z/OS component now require UNIX services, e.g.,TCP/IP.
The Linux kernel originated in 1991, as a project of LinusTorvalds, while a university student in Finland. He postedinformation about his project on a newsgroup for computerstudents and programmers, and received support and assistancefrom volunteers who succeeded in creating a complete andfunctional kernel.
Linux is Unix-like, but was developed without any Unix code,unlike BSD and its variants. Because of its open license model,the Linux kernel code is available for study and modification,which resulted in its use on a wide range of computing machineryfrom supercomputers to smartwatches. Although estimates suggestthat Linux is used on only 2.81% of all "desktop" (or laptop)PCs,[3] it has been widely adopted for use in servers[29] andembedded systems[30] such as cell phones. Linux has supersededUnix on many platforms and is used on most supercomputersincluding the top 385.[31] Many of the same computers are also onGreen500 (but in different order), and Linux runs on the top 10.
Linux is also commonly used on other small energy-efficientcomputers, such as smartphones and smartwatches. The Linuxkernel is used in some popular distributions, such as Red Hat,Debian, Ubuntu, Linux Mint and Google's Android, ChromeOS,and ChromiumOS.
Microsoft Windows is a family of proprietary operating systemsdesigned by Microsoft Corporation and primarily targeted to Intelarchitecture based computers, with an estimated 88.9 percent totalusage share on Web connected computers.[32][33][34][35] The latestversion is Windows 11.
In 2011, Windows 7 overtook Windows XP as the most common version in use.[36][37][38]z/OS UNIX System ServicesLinuxMicrosoft WindowsMicrosoft Windows was first released in 1985, as an operating environment running on top of MS-DOS,which was the standard operating system shipped on most Intel architecture personal computers at the time.
In 1995, Windows 95 was released which only used MS-DOS as a bootstrap. For backwards compatibility,Win9x could run real-mode MS-DOS[39][40] and 16-bit Windows 3.x[41] drivers. Windows ME, released in2000, was the last version in the Win9x family. Later versions have all been based on the Windows NTkernel. Current client versions of Windows run on IA-32, x86-64 and ARM microprocessors.[42] Inaddition Itanium is still supported in older server version Windows Server 2008 R2. In the past, WindowsNT supported additional architectures.
Server editions of Windows are widely used, however, Windows' usage on servers is not as widespread ason personal computers as Windows competes against Linux and BSD for server market share.[43][44]ReactOS is a Windows-alternative operating system, which is being developed on the principles ofWindows – without using any of Microsoft's code.
There have been many operating systems that were significant in their day but are no longer so, such asAmigaOS; OS/2 from IBM and Microsoft; classic Mac OS, the non-Unix precursor to Apple's macOS;BeOS; XTS-300; RISC OS; MorphOS; Haiku; BareMetal and FreeMint. Some are still used in nichemarkets and continue to be developed as minority platforms for enthusiast communities and specialistapplications.
The z/OS operating system for IBM z/Architecture mainframe computers is still being used and developed,and OpenVMS, formerly from DEC, is still under active development by VMS Software Inc. The IBM ioperating system for IBM AS/400 and IBM Power Systems midrange computers is also still being used anddeveloped.
Yet other operating systems are used almost exclusively in academia, for operating systems education or todo research on operating system concepts. A typical example of a system that fulfills both roles is MINIX,while for example Singularity is used purely for research. Another example is the Oberon System designedat ETH Zürich by Niklaus Wirth, Jürg Gutknecht and a group of students at the former Computer SystemsInstitute in the 1980s. It was used mainly for research, teaching, and daily work in Wirth's group.
Other operating systems have failed to win significant market share, but have introduced innovations thathave influenced mainstream operating systems, not least Bell Labs' Plan 9.
The components of an operating system all exist in order to make the different parts of a computer worktogether. All user software needs to go through the operating system in order to use any of the hardware,whether it be as simple as a mouse or keyboard or as complex as an Internet component.
OtherComponentsKernelA kernel connects the applicationsoftware to the hardware of acomputer.
With the aid of firmware and device drivers, the kernel provides themost basic level of control over all of the computer's hardwaredevices. It manages memory access for programs in the RAM, itdetermines which programs get access to which hardwareresources, it sets up or resets the CPU's operating states for optimaloperation at all times, and it organizes the data for long-term non-volatile storage with file systems on such media as disks, tapes,flash memory, etc.
The operating system provides an interface between an applicationprogram and the computer hardware, so that an application programcan interact with the hardware only by obeying rules andprocedures programmed into the operating system. The operating system is also a set of services whichsimplify development and execution of application programs. Executing an application program typicallyinvolves the creation of a process by the operating system kernel, which assigns memory space and otherresources, establishes a priority for the process in multi-tasking systems, loads program binary code intomemory, and initiates execution of the application program, which then interacts with the user and withhardware devices. However, in some systems an application can request that the operating system executeanother application within the same process, either as a subroutine or in a separate thread, e.g., the LINKand ATTACH facilities of OS/360 and successors..
An interrupt (also known as abort, exception, fault, signal[45] and trap)[46] provides an efficient way formost operating systems to react to the environment. Interrupts cause the central processing unit (CPU) tohave a control flow change away from the currently running program to an interrupt handler, also known asan interrupt service routine (ISR).[47][48] An interrupt service routine may cause the central processing unit(CPU) to have a context switch[49] [d]. The details of how a computer processes an interrupt vary fromarchitecture to architecture, and the details of how interrupt service routines behave vary from operatingsystem to operating system.[50] However, several interrupt functions are common.[50] The architecture andoperating system must:[50]1. transfer control to an interrupt service routine.
2. save the state of the currently running process.
3. restore the state after the interrupt is serviced.
A software interrupt is a message to a process that an event has occurred.[45] This contrasts with a hardwareinterrupt — which is a message to the central processing unit (CPU) that an event has occurred.[51]Software interrupts are similar to hardware interrupts — there is a change away from the currently runningprocess.[52] Similarly, both hardware and software interrupts execute an interrupt service routine.
Software interrupts may be normally occurring events. It is expected that a time slice will occur, so thekernel will have to perform a context switch.[53] A computer program may set a timer to go off after a fewseconds in case too much data causes an algorithm to take too long.[54]Program executionInterruptsSoftware interruptSoftware interrupts may be error conditions, such as a malformed machine instruction.[54] However, themost common error conditions are division by zero and accessing an invalid memory address.[54]Users can send messages to the kernel to modify the behavior of a currently running process.[54] Forexample, in the command-line environment, pressing the interrupt character (usually Control-C) mightterminate the currently running process.[54]To generate software interrupts for x86 CPUs, the INT assembly language instruction is available.[55] Thesyntax is INT X, where X is the offset number (in hexadecimal format) to the interrupt vector table.
To generate software interrupts in Unix-like operating systems, the kill(pid,signum) system callwill send a signal to another process.[56] pid is the process identifier of the receiving process. signum isthe signal number (in mnemonic format)[e] to be sent. (The abrasive name of kill was chosen becauseearly implementations only terminated the process.)[57]In Unix-like operating systems, signals inform processes of the occurrence of asynchronous events.[56] Tocommunicate asynchronously, interrupts are required.[58] One reason a process needs to asynchronouslycommunicate to another process solves a variation of the classic reader/writer problem.[59] The writerreceives a pipe from the shell for its output to be sent to the reader's input stream.[60] The command-linesyntax is alpha | bravo. alpha will write to the pipe when its computation is ready and then sleepin the wait queue.[61] bravo will then be moved to the ready queue and soon will read from its inputstream.[62] The kernel will generate software interrupts to coordinate the piping.[62]Signals may be classified into 7 categories.[56] The categories are:1. when a process finishes normally.
2. when a process has an error exception.
3. when a process runs out of a system resource.
4. when a process executes an illegal instruction.
5. when a process sets an alarm event.
6. when a process is aborted from the keyboard.
7. when a process has a tracing alert for debugging.
Input/Output (I/O) devices are slower than the CPU. Therefore, it would slow down the computer if theCPU had to wait for each I/O to finish. Instead, a computer may implement interrupts for I/O completion,avoiding the need for polling or busy waiting.[63]SignalHardware interruptSome computers require an interrupt for each character or word, costing a significant amount of CPU time.
Direct memory access (DMA) is an architecture feature to allow devices to bypass the CPU and accessmain memory directly.[64] (Separate from the architecture, a device may perform direct memory access[f] toand from main memory either directly or via a bus.)[65][g]When a computer user types a key on the keyboard, typically the character appears immediately on thescreen. Likewise, when a user moves a mouse, the cursor immediately moves across the screen. Eachkeystroke and mouse movement generates an interrupt called Interrupt-driven I/O. An interrupt-driven I/Ooccurs when a process causes an interrupt for every character[65] or word[66] transmitted.
Devices such as hard disk drives, solid state drives, and magnetic tape drives can transfer data at a rate highenough that interrupting the CPU for every byte or word transferred, and having the CPU transfer the byteor word between the device and memory, would require too much CPU time. Data is, instead, transferredbetween the device and memory independently of the CPU by hardware such as a channel or a directmemory access controller; an interrupt is delivered only when all the data is transferred.[67]If a computer program executes a system call to perform a block I/O write operation, then the system callmight execute the following instructions:Set the contents of the CPU's registers (including the program counter) into the processcontrol block.[68]Create an entry in the device-status table.[69] The operating system maintains this table tokeep track of which processes are waiting for which devices. One field in the table is thememory address of the process control block.
Place all the characters to be sent to the device into a memory buffer.[58]Set the memory address of the memory buffer to a predetermined device register.[70]Set the buffer size (an integer) to another predetermined register.[70]Execute the machine instruction to begin the writing.
Perform a context switch to the next process in the ready queue.
While the writing takes place, the operating system will context switch to other processes as normal. Whenthe device finishes writing, the device will interrupt the currently running process by asserting an interruptrequest. The device will also place an integer onto the data bus.[71] Upon accepting the interrupt request,the operating system will:Push the contents of the program counter (a register) followed by the status register onto thecall stack.[50]Push the contents of the other registers onto the call stack. (Alternatively, the contents of theregisters may be placed in a system table.)[71]Read the integer from the data bus. The integer is an offset to the interrupt vector table. Thevector table's instructions will then:Access the device-status table.
Input/OutputInterrupt-driven I/ODirect Memory AccessPrivilege rings for the x86 microprocessorarchitecture available in protected mode. Operatingsystems determine which processes run in eachmode.
Extract the process control block.
Perform a context switch back to the writing process.
When the writing process has its time slice expired, the operating system will:[72]Pop from the call stack the registers other than the status register and program counter.
Pop from the call stack the status register.
Pop from the call stack the address of the next instruction, and set it back into the programcounter.
With the program counter now reset, the interrupted process will resume its time slice.[50]Modern computers support multiple modes ofoperation. CPUs with this capability offer at least twomodes: user mode and supervisor mode. In generalterms, supervisor mode operation allows unrestrictedaccess to all machine resources, including all MPUinstructions. User mode operation sets limits oninstruction use and typically disallows direct access tomachine resources. CPUs might have other modessimilar to user mode as well, such as the virtual modesin order to emulate older processor types, such as 16-bit processors on a 32-bit one, or 32-bit processors on a64-bit one.
At power-on or reset, the system begins in supervisormode. Once an operating system kernel has beenloaded and started, the boundary between user modeand supervisor mode (also known as kernel mode) canbe established.
Supervisor mode is used by the kernel for low level tasks that need unrestricted access to hardware, such ascontrolling how memory is accessed, and communicating with devices such as disk drives and videodisplay devices. User mode, in contrast, is used for almost everything else. Application programs, such asword processors and database managers, operate within user mode, and can only access machine resourcesby turning control over to the kernel, a process which causes a switch to supervisor mode. Typically, thetransfer of control to the kernel is achieved by executing a software interrupt instruction, such as theMotorola 68000 TRAP instruction. The software interrupt causes the processor to switch from user mode tosupervisor mode and begin executing code that allows the kernel to take control.
In user mode, programs usually have access to a restricted set of processor instructions, and generallycannot execute any instructions that could potentially cause disruption to the system's operation. Insupervisor mode, instruction execution restrictions are typically removed, allowing the kernel unrestrictedaccess to all machine resources.
ModesThe term "user mode resource" generally refers to one or more CPU registers, which contain informationthat the running program isn't allowed to alter. Attempts to alter these resources generally cause a switch tosupervisor mode, where the operating system can deal with the illegal operation the program wasattempting; for example, by forcibly terminating ("killing") the program.
Among other things, a multiprogramming operating system kernel must be responsible for managing allsystem memory which is currently in use by the programs. This ensures that a program does not interferewith memory already in use by another program. Since programs time share, each program must haveindependent access to memory.
Cooperative memory management, used by many early operating systems, assumes that all programs makevoluntary use of the kernel's memory manager, and do not exceed their allocated memory. This system ofmemory management is almost never seen any more, since programs often contain bugs which can causethem to exceed their allocated memory. If a program fails, it may cause memory used by one or more otherprograms to be affected or overwritten. Malicious programs or viruses may purposefully alter anotherprogram's memory, or may affect the operation of the operating system itself. With cooperative memorymanagement, it takes only one misbehaved program to crash the system.
Memory protection enables the kernel to limit a process' access to the computer's memory. Various methodsof memory protection exist, including memory segmentation and paging. All methods require some level ofhardware support (such as the 80286 MMU), which doesn't exist in all computers.
In both segmentation and paging, certain protected mode registers specify to the CPU what memory addressit should allow a running program to access. Attempts to access other addresses trigger an interrupt, whichcauses the CPU to re-enter supervisor mode, placing the kernel in charge. This is called a segmentationviolation or Seg-V for short, and since it is both difficult to assign a meaningful result to such an operation,and because it is usually a sign of a misbehaving program, the kernel generally resorts to terminating theoffending program, and reports the error.
Windows versions 3.1 through ME had some level of memory protection, but programs could easilycircumvent the need to use it. A general protection fault would be produced, indicating a segmentationviolation had occurred; however, the system would often crash anyway.
The use of virtual memory addressing (such as paging or segmentation) means that the kernel can choosewhat memory each program may use at any given time, allowing the operating system to use the samememory locations for multiple tasks.
If a program tries to access memory that isn't in its current range of accessible memory, but nonetheless hasbeen allocated to it, the kernel is interrupted in the same way as it would if the program were to exceed itsallocated memory. (See section on memory management.) Under UNIX this kind of interrupt is referred toas a page fault.
When the kernel detects a page fault it generally adjusts the virtual memory range of the program whichtriggered it, granting it access to the memory requested. This gives the kernel discretionary power overwhere a particular application's memory is stored, or even whether or not it has actually been allocated yet.
Memory managementVirtual memoryMany operating systems can "trick"programs into using memory scatteredaround the hard disk and RAM as if it isone continuous chunk of memory, calledvirtual memory.
In modern operating systems, memory which is accessed lessfrequently can be temporarily stored on a disk or other mediato make that space available for use by other programs. This iscalled swapping, as an area of memory can be used by multipleprograms, and what that memory area contains can beswapped or exchanged on demand.
"Virtual memory" provides the programmer or the user withthe perception that there is a much larger amount of RAM inthe computer than is really there.[73]Multitasking refers to the running of multiple independentcomputer programs on the same computer, giving theappearance that it is performing the tasks at the same time.
Since most computers can do at most one or two things at onetime, this is generally done via time-sharing, which means thateach program uses a share of the computer's time to execute.
An operating system kernel contains a scheduling programwhich determines how much time each process spendsexecuting, and in which order execution control should bepassed to programs. Control is passed to a process by thekernel, which allows the program access to the CPU andmemory. Later, control is returned to the kernel through somemechanism, so that another program may be allowed to use theCPU. This so-called passing of control between the kernel andapplications is called a context switch.
An early model which governed the allocation of time to programs was called cooperative multitasking. Inthis model, when control is passed to a program by the kernel, it may execute for as long as it wants beforeexplicitly returning control to the kernel. This means that a malicious or malfunctioning program may notonly prevent any other programs from using the CPU, but it can hang the entire system if it enters an infiniteloop.
Modern operating systems extend the concepts of application preemption to device drivers and kernel code,so that the operating system has preemptive control over internal run-times as well.
The philosophy governing preemptive multitasking is that of ensuring that all programs are given regulartime on the CPU. This implies that all programs must be limited in how much time they are allowed tospend on the CPU without being interrupted. To accomplish this, modern operating system kernels makeuse of a timed interrupt. A protected mode timer is set by the kernel which triggers a return to supervisormode after the specified time has elapsed. (See above sections on Interrupts and Dual Mode Operation.)MultitaskingFile systems allow users and programs toorganize and sort files on a computer, oftenthrough the use of directories (or "folders").
On many single user operating systems cooperative multitasking is perfectly adequate, as home computersgenerally run a small number of well tested programs. AmigaOS is an exception, having preemptivemultitasking from its first version. Windows NT was the first version of Microsoft Windows which enforcedpreemptive multitasking, but it didn't reach the home user market until Windows XP (since Windows NTwas targeted at professionals).
Access to data stored on disks is a central feature of alloperating systems. Computers store data on disks using files,which are structured in specific ways in order to allow forfaster access, higher reliability, and to make better use of thedrive's available space. The specific way in which files arestored on a disk is called a file system, and enables files tohave names and attributes. It also allows them to be stored in ahierarchy of directories or folders arranged in a directory tree.
Early operating systems generally supported a single type ofdisk drive and only one kind of file system. Early file systemswere limited in their capacity, speed, and in the kinds of filenames and directory structures they could use. Theselimitations often reflected limitations in the operating systemsthey were designed for, making it very difficult for an operating system to support more than one filesystem.
While many simpler operating systems support a limited range of options for accessing storage systems,operating systems like UNIX and Linux support a technology known as a virtual file system or VFS. Anoperating system such as UNIX supports a wide array of storage devices, regardless of their design or filesystems, allowing them to be accessed through a common application programming interface (API). Thismakes it unnecessary for programs to have any knowledge about the device they are accessing. A VFSallows the operating system to provide programs with access to an unlimited number of devices with aninfinite variety of file systems installed on them, through the use of specific device drivers and file systemdrivers.
A connected storage device, such as a hard drive, is accessed through a device driver. The device driverunderstands the specific language of the drive and is able to translate that language into a standard languageused by the operating system to access all disk drives. On UNIX, this is the language of block devices.
When the kernel has an appropriate device driver in place, it can then access the contents of the disk drivein raw format, which may contain one or more file systems. A file system driver is used to translate thecommands used to access each specific file system into a standard set of commands that the operatingsystem can use to talk to all file systems. Programs can then deal with these file systems on the basis offilenames, and directories/folders, contained within a hierarchical structure. They can create, delete, open,and close files, as well as gather various information about them, including access permissions, size, freespace, and creation and modification dates.
Various differences between file systems make supporting all file systems difficult. Allowed characters infile names, case sensitivity, and the presence of various kinds of file attributes makes the implementation ofa single interface for every file system a daunting task. Operating systems tend to recommend using (and sosupport natively) file systems specifically designed for them; for example, NTFS in Windows and ReiserFS,Reiser4, ext3, ext4 and Btrfs in Linux. However, in practice, third party drivers are usually available to giveDisk access and file systemssupport for the most widely used file systems in most general-purpose operating systems (for example,NTFS is available in Linux through NTFS-3g, and ext2/3 and ReiserFS are available in Windows throughthird-party software).
Support for file systems is highly varied among modern operating systems, although there are severalcommon file systems which almost all operating systems include support and drivers for. Operating systemsvary on file system support and on the disk formats they may be installed on. Under Windows, each filesystem is usually limited in application to certain media; for example, CDs must use ISO 9660 or UDF, andas of Windows Vista, NTFS is the only file system which the operating system can be installed on. It ispossible to install Linux onto many types of file systems. Unlike other operating systems, Linux and UNIXallow any file system to be used regardless of the media it is stored in, whether it is a hard drive, a disc (CD,DVD...), a USB flash drive, or even contained within a file located on another file system.
A device driver is a specific type of computer software developed to allow interaction with hardwaredevices. Typically this constitutes an interface for communicating with the device, through the specificcomputer bus or communications subsystem that the hardware is connected to, providing commands toand/or receiving data from the device, and on the other end, the requisite interfaces to the operating systemand software applications. It is a specialized hardware-dependent computer program which is also operatingsystem specific that enables another program, typically an operating system or applications softwarepackage or computer program running under the operating system kernel, to interact transparently with ahardware device, and usually provides the requisite interrupt handling necessary for any necessaryasynchronous time-dependent hardware interfacing needs.
The key design goal of device drivers is abstraction. Every model of hardware (even within the same classof device) is different. Newer models also are released by manufacturers that provide more reliable or betterperformance and these newer models are often controlled differently. Computers and their operatingsystems cannot be expected to know how to control every device, both now and in the future. To solve thisproblem, operating systems essentially dictate how every type of device should be controlled. The functionof the device driver is then to translate these operating system mandated function calls into device specificcalls. In theory a new device, which is controlled in a new manner, should function correctly if a suitabledriver is available. This new driver ensures that the device appears to operate as usual from the operatingsystem's point of view.
Under versions of Windows before Vista and versions of Linux before 2.6, all driver execution was co-operative, meaning that if a driver entered an infinite loop it would freeze the system. More recent revisionsof these operating systems incorporate kernel preemption, where the kernel interrupts the driver to give ittasks, and then separates itself from the process until it receives a response from the device driver, or gives itmore tasks to do.
Currently most operating systems support a variety of networking protocols, hardware, and applications forusing them. This means that computers running dissimilar operating systems can participate in a commonnetwork for sharing resources such as computing, files, printers, and scanners using either wired or wirelessconnections. Networks can essentially allow a computer's operating system to access the resources of aremote computer to support the same functions as it could if those resources were connected directly to thelocal computer. This includes everything from simple communication, to using networked file systems orDevice driversNetworkingeven sharing another computer's graphics or sound hardware. Some network services allow the resources ofa computer to be accessed transparently, such as SSH which allows networked users direct access to acomputer's command line interface.
Client/server networking allows a program on a computer, called a client, to connect via a network toanother computer, called a server. Servers offer (or host) various services to other network computers andusers. These services are usually provided through ports or numbered access points beyond the server's IPaddress. Each port number is usually associated with a maximum of one running program, which isresponsible for handling requests to that port. A daemon, being a user program, can in turn access the localhardware resources of that computer by passing requests to the operating system kernel.
Many operating systems support one or more vendor-specific or open networking protocols as well, forexample, SNA on IBM systems, DECnet on systems from Digital Equipment Corporation, and Microsoft-specific protocols (SMB) on Windows. Specific protocols for specific tasks may also be supported such asNFS for file access. Protocols like ESound, or esd can be easily extended over the network to providesound from local applications, on a remote system's sound hardware.
A computer being secure depends on a number of technologies working properly. A modern operatingsystem provides access to a number of resources, which are available to software running on the system,and to external devices like networks via the kernel.[74]The operating system must be capable of distinguishing between requests which should be allowed to beprocessed, and others which should not be processed. While some systems may simply distinguish between"privileged" and "non-privileged", systems commonly have a form of requester identity, such as a username. To establish identity there may be a process of authentication. Often a username must be quoted, andeach username may have a password. Other methods of authentication, such as magnetic cards or biometricdata, might be used instead. In some cases, especially connections from the network, resources may beaccessed with no authentication at all (such as reading files over a network share). Also covered by theconcept of requester identity is authorization; the particular services and resources accessible by therequester once logged into a system are tied to either the requester's user account or to the variouslyconfigured groups of users to which the requester belongs.
In addition to the allow or disallow model of security, a system with a high level of security also offersauditing options. These would allow tracking of requests for access to resources (such as, "who has beenreading this file?"). Internal security, or security from an already running program is only possible if allpossibly harmful requests must be carried out through interrupts to the operating system kernel. If programscan directly access hardware and resources, they cannot be secured.
External security involves a request from outside the computer, such as a login at a connected console orsome kind of network connection. External requests are often passed through device drivers to the operatingsystem's kernel, where they can be passed onto applications, or carried out directly. Security of operatingsystems has long been a concern because of highly sensitive data held on computers, both of a commercialand military nature. The United States Government Department of Defense (DoD) created the TrustedComputer System Evaluation Criteria (TCSEC) which is a standard that sets basic requirements forassessing the effectiveness of security. This became of vital importance to operating system makers, becausethe TCSEC was used to evaluate, classify and select trusted operating systems being considered for theprocessing, storage and retrieval of sensitive or classified information.
SecurityA screenshot of the bash command line.
Each command is typed out after the'prompt', and then its output appears below,working its way down the screen. Thecurrent command prompt is at the bottom.
A screenshot of the KDE Plasma 5graphical user interface. Programs take theform of images on the screen, and thefiles, folders (directories), and applicationstake the form of icons and symbols. Amouse is used to navigate the computer.
Network services include offerings such as file sharing, print services, email, web sites, and file transferprotocols (FTP), most of which can have compromised security. At the front line of security are hardwaredevices known as firewalls or intrusion detection/prevention systems. At the operating system level, thereare a number of software firewalls available, as well as intrusion detection/prevention systems. Mostmodern operating systems include a software firewall, which is enabled by default. A software firewall canbe configured to allow or deny network traffic to or from a service or application running on the operatingsystem. Therefore, one can install and be running an insecure service, such as Telnet or FTP, and not haveto be threatened by a security breach because the firewall would deny all traffic trying to connect to theservice on that port.
An alternative strategy, and the only sandbox strategy available in systems that do not meet the Popek andGoldberg virtualization requirements, is where the operating system is not running user programs as nativecode, but instead either emulates a processor or provides a host for a p-code based system such as Java.
Internal security is especially relevant for multi-user systems; it allows each user of the system to haveprivate files that the other users cannot tamper with or read. Internal security is also vital if auditing is to beof any use, since a program can potentially bypass the operating system, inclusive of bypassing auditing.
Every computer that is to be operated by an individualrequires a user interface. The user interface is usually referredto as a shell and is essential if human interaction is to besupported. The user interface views the directory structure andrequests services from the operating system that will acquiredata from input hardware devices, such as a keyboard, mouseor credit card reader, and requests operating system services todisplay prompts, status messages and such on outputhardware devices, such as a video monitor or printer. The twomost common forms of a user interface have historically beenthe command-line interface, where computer commands aretyped out line-by-line, and the graphical user interface, wherea visual environment (most commonly a WIMP) is present.
Most of the modern computer systems support graphical userinterfaces (GUI), and often include them. In some computersystems, such as the original implementation of the classicMac OS, the GUI is integrated into the kernel.
While technically a graphical user interface is not an operatingsystem service, incorporating support for one into theoperating system kernel can allow the GUI to be moreresponsive by reducing the number of context switchesrequired for the GUI to perform its output functions. Otheroperating systems are modular, separating the graphicssubsystem from the kernel and the Operating System. In the1980s UNIX, VMS and many others had operating systemsthat were built this way. Linux and macOS are also built thisUser interfaceGraphical user interfacesway. Modern releases of Microsoft Windows such as Windows Vista implement a graphics subsystem thatis mostly in user-space; however the graphics drawing routines of versions between Windows NT 4.0 andWindows Server 2003 exist mostly in kernel space. Windows 9x had very little distinction between theinterface and the kernel.
Many computer operating systems allow the user to install or create any user interface they desire. TheX Window System in conjunction with GNOME or KDE Plasma 5 is a commonly found setup on mostUnix and Unix-like (BSD, Linux, Solaris) systems. A number of Windows shell replacements have beenreleased for Microsoft Windows, which offer alternatives to the included Windows shell, but the shell itselfcannot be separated from Windows.
Numerous Unix-based GUIs have existed over time, most derived from X11. Competition among thevarious vendors of Unix (HP, IBM, Sun) led to much fragmentation, though an effort to standardize in the1990s to COSE and CDE failed for various reasons, and were eventually eclipsed by the widespreadadoption of GNOME and K Desktop Environment. Prior to free software-based toolkits and desktopenvironments, Motif was the prevalent toolkit/desktop combination (and was the basis upon which CDEwas developed).
Graphical user interfaces evolve over time. For example, Windows has modified its user interface almostevery time a new major version of Windows is released, and the Mac OS GUI changed dramatically withthe introduction of Mac OS X in 1999.[75]A real-time operating system (RTOS) is an operating system intended for applications with fixed deadlines(real-time computing). Such applications include some small embedded systems, automobile enginecontrollers, industrial robots, spacecraft, industrial control, and some large-scale computing systems.
An early example of a large-scale real-time operating system was Transaction Processing Facility developedby American Airlines and IBM for the Sabre Airline Reservations System.
Embedded systems that have fixed deadlines use a real-time operating system such as VxWorks, PikeOS,eCos, QNX, MontaVista Linux and RTLinux. Windows CE is a real-time operating system that sharessimilar APIs to desktop Windows but shares none of desktop Windows' codebase.[76] Symbian OS also hasan RTOS kernel (EKA2) starting with version 8.0b.
Some embedded systems use operating systems such as Palm OS, BSD, and Linux, although suchoperating systems do not support real-time computing.
A hobby operating system may be classified as one whose code has not been directly derived from anexisting operating system, and has few users and active developers.
In some cases, hobby development is in support of a "homebrew" computing device, for example, a simplesingle-board computer powered by a 6502 microprocessor. Or, development may be for an architecturealready in widespread use. Operating system development may come from entirely new concepts, or maycommence by modeling an existing operating system. In either case, the hobbyist is her/his own developer,or may interact with a small and sometimes unstructured group of individuals who have like interests.
Real-time operating systemsOperating system development as a hobbyExamples of a hobby operating system include Syllable and TempleOS.
Application software is generally written for use on a specific operating system, and sometimes even forspecific hardware. When porting the application to run on another OS, the functionality required by thatapplication may be implemented differently by that OS (the names of functions, meaning of arguments, etc.)requiring the application to be adapted, changed, or otherwise maintained.
Unix was the first operating system not written in assembly language, making it very portable to systemsdifferent from its native PDP-11.[77]This cost in supporting operating systems diversity can be avoided by instead writing applications againstsoftware platforms such as Java or Qt. These abstractions have already borne the cost of adaptation tospecific operating systems and their system libraries.
Another approach is for operating system vendors to adopt standards. For example, POSIX and OSabstraction layers provide commonalities that reduce porting costs.
Comparison of operating systemsCrash (computing)HypervisorInterruptible operating systemList of important publications in operating systemsList of operating systemsList of pioneers in computer scienceLive CDGlossary of operating systems termsMicrocontrollerMobile deviceMobile operating systemNetwork operating systemObject-oriented operating systemOperating System ProjectsSystem CommanderSystem imageTimeline of operating systemsa. A combination of DOS/360 and emulation software was known as Compatibility OperatingSystem (COS).
b. However, ESPOL did allow source programs to specify all of the operations of the instructionDiversity of operating systems and portabilityMarket shareSee alsoNotesrepertoire.
c. Bell Labs quickly dropped out, leaving GE and MIT.
d. Modern CPUs provide instructions (e.g. SYSENTER) to invoke selected kernel serviceswithout an interrupts. Visit https://wiki.osdev.org/SYSENTER for more information.
e. Examples include SIGINT, SIGSEGV, and SIGBUS.
f. often in the form of a DMA chip for smaller systems and I/O channels for larger systemsg. Modern motherboards have a DMA controller. Additionally, a device may also have one. VisitSCSI RDMA Protocol.
1. Stallings (2005). Operating Systems, Internals and Design Principles. Pearson: PrenticeHall. p. 6.
2. Dhotre, I.A. (2009). Operating Systems. Technical Publications. p. 1.
3. "Desktop Operating System Market Share Worldwide" (https://gs.statcounter.com/os-market-share/desktop/worldwide/). StatCounter Global Stats. Archived (https://archive.today/20200127171354/https://gs.statcounter.com/os-market-share/desktop/worldwide/) from the originalon 27 January 2020. Retrieved 12 October 2022.
4. "Mobile & Tablet Operating System Market Share Worldwide" (https://gs.statcounter.com/os-market-share/mobile-tablet/worldwide/). StatCounter Global Stats. Archived (https://web.archive.org/web/20201101023121/https://gs.statcounter.com/os-market-share/mobile-tablet/worldwide) from the original on 1 November 2020. Retrieved 12 October 2022.
5. "Strategy Analytics: Android Captures Record 88 Percent Share of Global SmartphoneShipments in Q3 2016" (http://www.businesswire.com/news/home/20161102006440/en/Strategy-Analytics-Android-Captures-Record-88-Percent). 2 November 2016. Archived (https://web.archive.org/web/20161105223332/http://www.businesswire.com/news/home/20161102006440/en/Strategy-Analytics-Android-Captures-Record-88-Percent) from the original on 5November 2016.
6. "VII. Special-Purpose Systems - Operating System Concepts, Seventh Edition [Book]" (https://www.oreilly.com/library/view/operating-system-concepts/9780471694663/pt07.html).
www.oreilly.com. Archived (https://web.archive.org/web/20210613190049/https://www.oreilly.
com/library/view/operating-system-concepts/9780471694663/pt07.html) from the original on13 June 2021. Retrieved 8 February 2021.
7. "Special-Purpose Operating Systems - RWTH AACHEN UNIVERSITY Institute forAutomation of Complex Power Systems - English" (https://www.acs.eonerc.rwth-aachen.de/cms/E-ON-ERC-ACS/Studium/Lehrveranstaltungen/~lrhs/Spezial-Betriebssysteme/?lidx=1).
www.acs.eonerc.rwth-aachen.de. Archived (https://web.archive.org/web/20210614034001/https://www.acs.eonerc.rwth-aachen.de/cms/E-ON-ERC-ACS/Studium/Lehrveranstaltungen/~lrhs/Spezial-Betriebssysteme/?lidx=1) from the original on 14 June 2021. Retrieved8 February 2021.
8. Lorch, Jacob R., and Alan Jay Smith. "Reducing processor power consumption by improvingprocessor time management in a single-user operating system." Proceedings of the 2ndannual international conference on Mobile computing and networking. ACM, 1996.
9. Mishra, B.; Singh, N.; Singh, R. (2014). "Master-slave group based model for co-ordinatorselection, an improvement of bully algorithm". International Conference on Parallel,Distributed and Grid Computing (PDGC). pp. 457–460. doi:10.1109/PDGC.2014.7030789 (https://doi.org/10.1109%2FPDGC.2014.7030789). ISBN 978-1-4799-7682-9.
S2CID 13887160 (https://api.semanticscholar.org/CorpusID:13887160).
References10. Hansen, Per Brinch, ed. (2001). Classic Operating Systems (https://books.google.com/books?id=-PDPBvIPYBkC&pg=PP1). Springer. pp. 4–7. ISBN 0-387-95113-X. Archived (https://web.archive.org/web/20230111061716/https://books.google.com/books?id=-PDPBvIPYBkC&pg=PP1) from the original on 11 January 2023. Retrieved 19 December 2020.
11. Ryckman, George (1960). "The computer operation language" (https://doi.org/10.1145/1460361.1460406). IRE-AIEE-ACM '60 (Western): 341. doi:10.1145/1460361.1460406 (https://doi.
org/10.1145%2F1460361.1460406). S2CID 30745551 (https://api.semanticscholar.org/CorpusID:30745551).
12. Lavington, Simon (1998). A History of Manchester Computers (2nd ed.). Swindon: TheBritish Computer Society. pp. 50–52. ISBN 978-1-902505-01-5.
13. Kilburn, T.; Payne, R. B.; Howarth, D. J. (December 1961). "The Atlas Supervisor" (https://dl.acm.org/doi/pdf/10.1145/1460764.1460786). Institute of Electrical Engineers: 279–294.
doi:10.1145/1460764.1460786 (https://doi.org/10.1145%2F1460764.1460786).
S2CID 16466990 (https://api.semanticscholar.org/CorpusID:16466990). Archived (https://web.archive.org/web/20220609221919/https://dl.acm.org/doi/pdf/10.1145/1460764.1460786)from the original on 9 June 2022. Retrieved 17 June 2022.
14. Brinch Hansen, Per (2000). Classic Operating Systems: From Batch Processing toDistributed Systems. Springer-Verlag.
15. EXEC I UNIVAC 1107 Executive System (http://bitsavers.org/pdf/univac/1107/UP-2577r1_EXEC_I_Tech.pdf) (PDF) (rev. 1 ed.). Sperry Rand. UP-2577. Archived (https://web.archive.org/web/20220615003346/http://bitsavers.org/pdf/univac/1107/UP-2577r1_EXEC_I_Tech.pdf)(PDF) from the original on 15 June 2022. Retrieved 15 May 2022.
16. UNIVAC DATA PROCESSING DIVISION MULTI-PROCESSOR SYSTEM EXEC IIPROGRAMMERS REFERENCE MANUAL (http://bitsavers.org/pdf/univac/1100/exec/UP-4058_EXEC_II_Programmers_Ref_Man_1966.pdf) (PDF). Sperry Rand. 1966. UP-4058.
Archived (https://web.archive.org/web/20220615003849/http://bitsavers.org/pdf/univac/1100/exec/UP-4058_EXEC_II_Programmers_Ref_Man_1966.pdf) (PDF) from the original on 15June 2022. Retrieved 15 May 2022.
17. UNIVAC 1108 MULTI-PROCESSOR SYSTEM Operating System EXEC 8PROGRAMMERS REFERENCE (http://bitsavers.org/pdf/univac/1100/exec/UP-4144_Rev1_1108_Exec_8_Programmers_Reference_1968.pdf) (PDF) (rev. 1 ed.). Sperry Rand. 1968.
UP-4144. Archived (https://web.archive.org/web/20220525145022/http://bitsavers.org/pdf/univac/1100/exec/UP-4144_Rev1_1108_Exec_8_Programmers_Reference_1968.pdf) (PDF)from the original on 25 May 2022. Retrieved 15 May 2022.
18. "Intel® Microprocessor Quick Reference Guide - Year" (http://www.intel.com/pressroom/kits/quickrefyr.htm#1985). www.intel.com. Archived (https://web.archive.org/web/20160425001839/http://www.intel.com/pressroom/kits/quickrefyr.htm#1985) from the original on 25 April2016. Retrieved 24 April 2016.
19. Ritchie, Dennis. "Unix Manual, first edition" (https://web.archive.org/web/20080518013206/http://cm.bell-labs.com/cm/cs/who/dmr/1stEdman.html). Lucent Technologies. Archived fromthe original (http://cm.bell-labs.com/cm/cs/who/dmr/1stEdman.html) on 18 May 2008.
Retrieved 22 November 2012.
20. "OS X Mountain Lion – Move your Mac even further ahead" (https://www.apple.com/macosx/lion/). Apple. Archived (https://web.archive.org/web/20110523090205/http://www.apple.com/macosx/lion/) from the original on 23 May 2011. Retrieved 7 August 2012.
21. "OPENEDITION SERVICES ON MVS/ESA SP VERSION 4 RELEASE 3 ANNOUNCEDAND AVAILABILITY OF MVS/ESA SP VERSION 4 RELEASE 3 WITH ADDITIONALENHANCEMENTS" (https://www.ibm.com/common/ssi/ShowDoc.wss?docURL=%2Fcommon%2Fssi%2Frep_ca%2F0%2F897%2FENUS293-060%2Findex.html). AnnouncementLetters. IBM. 9 February 1993. 293-060. Archived (https://web.archive.org/web/20220319082258/https://www.ibm.com/common/ssi/ShowDoc.wss?docURL=%2Fcommon%2Fssi%2Frep_ca%2F0%2F897%2FENUS293-060%2Findex.html) from the original on 19 March 2022.
Retrieved 2 February 2022.
22. Introducing OpenEdition MVS. First Edition. IBM. December 1993. GC23-3010-00.
23. OpenEdition MVS POSIX.1 Conformance Document. First Edition. IBM. February 1993.
GC23-3011-00.
24. OpenEdition MVS POSIX.2 Conformance Document. First Edition. IBM. December 1993.
GC23-3012-00.
25. "Twenty Years of Linux according to Linus Torvalds" (https://www.zdnet.com/article/twenty-years-of-linux-according-to-linus-torvalds/). ZDNet. April 13, 2011. Archived (https://web.archive.org/web/20160919232940/http://www.zdnet.com/article/twenty-years-of-linux-according-to-linus-torvalds/) from the original on September 19, 2016. Retrieved September 19, 2016.
26. Linus Benedict Torvalds (5 October 1991). "Free minix-like kernel sources for 386-AT" (https://groups.google.com/group/comp.os.minix/msg/2194d253268b0a1b?pli=1).
Newsgroup: comp.os.minix (news:comp.os.minix). Archived (https://web.archive.org/web/20130302010902/http://groups.google.com/group/comp.os.minix/msg/2194d253268b0a1b?pli=1) from the original on 2 March 2013. Retrieved 30 September 2011.
27. "What Is Linux: An Overview of the Linux Operating System" (https://medium.com/@theinfovalley097/what-is-linux-an-overview-of-the-linux-operating-system-77bc7421c7e5?sk=b80b38575284317290c86e56001e43b1). Medium. Archived (https://web.archive.org/web/20200612030853/https://medium.com/@theinfovalley097/what-is-linux-an-overview-of-the-linux-operating-system-77bc7421c7e5?sk=b80b38575284317290c86e56001e43b1) from the originalon June 12, 2020. Retrieved December 21, 2019.
28. Linux Online (2008). "Linux Logos and Mascots" (https://web.archive.org/web/20100815085106/http://www.linux.org/info/logos.html). Archived from the original (http://www.linux.org/info/logos.html) on 15 August 2010. Retrieved 11 August 2009.
29. "IDC report into Server market share" (https://web.archive.org/web/20120927155332/http://www.idc.com/about/viewpressrelease.jsp?containerId=prUS22360110&sectionId=null&elementId=null&pageType=SYNOPSIS). Idc.com. Archived from the original (http://www.idc.com/about/viewpressrelease.jsp?containerId=prUS22360110&sectionId=null&elementId=null&pageType=SYNOPSIS) on 27 September 2012. Retrieved 7 August 2012.
30. LinuxDevices Staff (23 April 2008). "Linux still top embedded OS" (https://web.archive.org/web/20160419010154/http://archive.linuxgizmos.com/linux-still-top-embedded-os/).
LinuxGizmos.com. Archived from the original (http://archive.linuxgizmos.com/linux-still-top-embedded-os/) on 19 April 2016. Retrieved 5 April 2016.
31. "Sublist Generator" (http://www.top500.org/statistics/sublist/). Top500.org. Archived (https://web.archive.org/web/20210227033312/https://top500.org/statistics/sublist/) from the originalon 27 February 2021. Retrieved 6 February 2017.
32. "Top 5 Operating Systems from January to April 2011" (http://gs.statcounter.com/#os-ww-monthly-201101-201104-bar). StatCounter. October 2009. Archived (https://archive.today/20120526/http://gs.statcounter.com/%23mobile_browser-ww-monthly-201012-201111-bar#os-ww-monthly-201101-201104-bar) from the original on 26 May 2012. Retrieved 5 November 2009.
33. "Global Web Stats" (http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8). Net Market Share, Net Applications. May 2011. Archived (https://web.archive.org/web/20100125022803/http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8) from the original on 25 January 2010. Retrieved 7 May 2011.
34. "Global Web Stats" (http://www.w3counter.com/globalstats.php). W3Counter, Awio WebServices. September 2009. Archived (https://archive.today/20120628/http://www.w3counter.com/globalstats.php) from the original on 28 June 2012. Retrieved 24 October 2009.
35. "Operating System Market Share" (http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8). Net Applications. October 2009. Archived (https://web.archive.org/web/20100125022803/http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8) from the original on 25 January 2010. Retrieved 5 November 2009.
36. "w3schools.com OS Platform Statistics" (http://www.w3schools.com/browsers/browsers_os.asp). Archived (https://web.archive.org/web/20110805133049/http://w3schools.com/browsers/browsers_os.asp) from the original on 5 August 2011. Retrieved 30 October 2011.
37. "Stats Count Global Stats Top Five Operating Systems" (http://gs.statcounter.com/#os-ww-monthly-201010-201110). Archived (https://archive.today/20120526/http://gs.statcounter.com/%23mobile_browser-ww-monthly-201012-201111-bar#os-ww-monthly-201010-201110)from the original on 26 May 2012. Retrieved 30 October 2011.
38. "Global statistics at w3counter.com" (http://www.w3counter.com/globalstats.php). Archived (https://archive.today/20120628/http://www.w3counter.com/globalstats.php) from the original on28 June 2012. Retrieved 23 January 2012.
39. "Troubleshooting MS-DOS Compatibility Mode on Hard Disks" (http://support.microsoft.com/kb/130179/EN-US). Support.microsoft.com. Archived (https://web.archive.org/web/20120810073641/http://support.microsoft.com/kb/130179/EN-US) from the original on 10 August 2012.
Retrieved 7 August 2012.
40. "Using NDIS 2 PCMCIA Network Card Drivers in Windows 95" (http://support.microsoft.com/kb/134748/en). Support.microsoft.com. Archived (https://web.archive.org/web/20130217043405/http://support.microsoft.com/kb/134748/en) from the original on 17 February 2013.
Retrieved 7 August 2012.
41. "INFO: Windows 95 Multimedia Wave Device Drivers Must be 16 bit" (http://support.microsoft.com/kb/163354/en). Support.microsoft.com. Archived (https://web.archive.org/web/20130217043412/http://support.microsoft.com/kb/163354/en) from the original on 17 February 2013.
Retrieved 7 August 2012.
42. Arthur, Charles. "Windows 8 will run on ARM chips - but third-party apps will need rewrite" (https://www.theguardian.com/technology/2011/jan/05/microsoft-windows-8-arm-processors).
The Guardian. Archived (https://web.archive.org/web/20161012022725/https://www.theguardian.com/technology/2011/jan/05/microsoft-windows-8-arm-processors) from the original on12 October 2016.
43. "Operating System Share by Groups for Sites in All Locations January 2009" (https://web.archive.org/web/20090706135203/http://news.netcraft.com/SSL-Survey/CMatch/osdv_all).
Archived from the original (http://news.netcraft.com/SSL-Survey/CMatch/osdv_all) on 6 July2009. Retrieved 3 May 2010.
44. "Behind the IDC data: Windows still No. 1 in server operating systems" (http://blogs.zdnet.com/microsoft/?p=5408). ZDNet. 26 February 2010. Archived (https://web.archive.org/web/20100301032456/http://blogs.zdnet.com/microsoft/?p=5408) from the original on 1 March 2010.
45. Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p. 388.
ISBN 978-1-59327-220-3. "A signal is a notification to a process that an event has occurred.
Signals are sometimes described as software interrupts."46. Hyde, Randall (1996). "Chapter Seventeen: Interrupts, Traps and Exceptions (Part 1)" (https://www.plantation-productions.com/Webster/www.artofasm.com/DOS/ch17/CH17-1.html#HEADING1-0). The Art Of Assembly Language Programming. No Starch Press. Archived (https://web.archive.org/web/20211222205623/https://www.plantation-productions.com/Webster/www.artofasm.com/DOS/ch17/CH17-1.html#HEADING1-0) from the original on 22December 2021. Retrieved 22 December 2021. "The concept of an interrupt is somethingthat has expanded in scope over the years. The 80x86 family has only added to theconfusion surrounding interrupts by introducing the int (software interrupt) instruction. Indeed,different manufacturers have used terms like exceptions, faults, aborts, traps and interrupts todescribe the phenomena this chapter discusses. Unfortunately there is no clear consensusas to the exact meaning of these terms. Different authors adopt different terms to their ownuse."47. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/308). Prentice Hall. p. 308 (https://archive.org/details/structuredcomput00tane/page/308). ISBN 978-0-13-854662-5. "Like the trap, theinterrupt stops the running program and transfers control to an interrupt handler, whichperforms some appropriate action. When finished, the interrupt handler returns control to theinterrupted program."48. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 32. ISBN 978-0-201-50480-4. "When an interrupt (or trap) occurs, the hardware transferscontrol to the operating system. First, the operating system preserves the state of the CPU bystoring registers and the program counter. Then, it determines which type of interrupt hasoccurred. For each type of interrupt, separate segments of code in the operating systemdetermine what action should be taken."49. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 105. ISBN 978-0-201-50480-4. "Switching the CPU to another process requires savingthe state of the old process and loading the saved state for the new process. This task isknown as a context switch."50. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 31. ISBN 978-0-201-50480-4.
51. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 30. ISBN 978-0-201-50480-4. "Hardware may trigger an interrupt at any time by sending asignal to the CPU, usually by way of the system bus."52. Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p. 388.
ISBN 978-1-59327-220-3. "Signals are analogous to hardware interrupts in that theyinterrupt the normal flow of execution of a program; in most cases, it is not possible to predictexactly when a signal will arrive."53. Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p. 388.
ISBN 978-1-59327-220-3. "Among the types of events that cause the kernel to generate asignal for a process are the following: A software event occurred. For example, ... theprocess's CPU time limit was exceeded[.]"54. Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p. 388.
ISBN 978-1-59327-220-3.
55. "Intel® 64 and IA-32 Architectures Software Developer's Manual" (https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf) (PDF). Intel Corporation. September 2016.
p. 610. Archived (https://web.archive.org/web/20220323231921/https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf) (PDF) from the original on 23 March 2022.
Retrieved 5 May 2022.
56. Bach, Maurice J. (1986). The Design of the UNIX Operating System. Prentice-Hall. p. 200.
ISBN 0-13-201799-7.
57. Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p. 400.
ISBN 978-1-59327-220-3.
58. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/308). Prentice Hall. p. 308 (https://archive.org/details/structuredcomput00tane/page/308). ISBN 978-0-13-854662-5.
59. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 182. ISBN 978-0-201-50480-4.
60. Haviland, Keith; Salama, Ben (1987). UNIX System Programming. Addison-WesleyPublishing Company. p. 153. ISBN 0-201-12919-1.
61. Haviland, Keith; Salama, Ben (1987). UNIX System Programming. Addison-WesleyPublishing Company. p. 148. ISBN 0-201-12919-1.
62. Haviland, Keith; Salama, Ben (1987). UNIX System Programming. Addison-WesleyPublishing Company. p. 149. ISBN 0-201-12919-1.
63. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/292). Prentice Hall. p. 292 (https://archive.org/details/structuredcomput00tane/page/292). ISBN 978-0-13-854662-5.
64. IBM (September 1968), "Main Storage" (http://bitsavers.org/pdf/ibm/360/princOps/A22-6821-7_360PrincOpsDec67.pdf#page=8) (PDF), IBM System/360 Principles of Operation (http://bitsavers.org/pdf/ibm/360/princOps/A22-6821-7_360PrincOpsDec67.pdf) (PDF), EighthEdition, p. 7, archived (https://web.archive.org/web/20220319083255/http://bitsavers.org/pdf/ibm/360/princOps/A22-6821-7_360PrincOpsDec67.pdf) (PDF) from the original on 19 March2022, retrieved 13 April 202265. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/294). Prentice Hall. p. 294 (https://archive.org/details/structuredcomput00tane/page/294). ISBN 978-0-13-854662-5.
66. "Program Interrupt Controller (PIC)" (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7userHbk_Jun65.pdf#page=62) (PDF). Users Handbook - PDP-7 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7userHbk_Jun65.pdf) (PDF). Digital Equipment Corporation. 1965. pp. 48 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7userHbk_Jun65.pdf#page=63). F-75. Archived (https://web.archive.org/web/20220510164742/http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7userHbk_Jun65.pdf) (PDF) from the original on 10 May 2022. Retrieved 20 April 2022.
67. PDP-1 Input-Output Systems Manual (http://bitsavers.org/pdf/dec/pdp1/F25_PDP1_IO.pdf)(PDF). Digital Equipment Corporation. pp. 19–20. Archived (https://web.archive.org/web/20190125050839/http://bitsavers.org/pdf/dec/pdp1/F25_PDP1_IO.pdf) (PDF) from the originalon 25 January 2019. Retrieved 16 August 2022.
68. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 32. ISBN 978-0-201-50480-4.
69. Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley.
p. 34. ISBN 978-0-201-50480-4.
70. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/295). Prentice Hall. p. 295 (https://archive.org/details/structuredcomput00tane/page/295). ISBN 978-0-13-854662-5.
71. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/309). Prentice Hall. p. 309 (https://archive.org/details/structuredcomput00tane/page/309). ISBN 978-0-13-854662-5.
72. Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition (https://archive.org/details/structuredcomput00tane/page/310). Prentice Hall. p. 310 (https://archive.org/details/structuredcomput00tane/page/310). ISBN 978-0-13-854662-5.
73. Stallings, William (2008). Computer Organization & Architecture. New Delhi: Prentice-Hall ofIndia Private Limited. p. 267. ISBN 978-81-203-2962-1.
74. "Operating Systems: Security" (https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/15_Security.html). www.cs.uic.edu. Archived (https://web.archive.org/web/20201207224231/https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/15_Security.html) from theoriginal on 7 December 2020. Retrieved 27 November 2020.
75. Poisson, Ken. "Chronology of Personal Computer Software" (http://www.islandnet.com/~kpolsson/compsoft/soft1998.htm) Archived (https://web.archive.org/web/20080514022217/http://www.islandnet.com/~kpolsson/compsoft/soft1998.htm) 14 May 2008 at the WaybackMachine. Retrieved on 2008-05-07. Last checked on 2009-03-30.
76. "Reading: Operating System" (https://courses.lumenlearning.com/sanjacinto-computerapps-v2/chapter/reading-operating-system/). Lumen. Archived (https://web.archive.org/web/20190106012248/https://courses.lumenlearning.com/sanjacinto-computerapps-v2/chapter/reading-operating-system/) from the original on 6 January 2019. Retrieved 5 January 2019.
77. "The History of Unix" (https://archive.org/stream/byte-magazine-1983-08/1983_08_BYTE_08-08_The_C_Language#page/n189/mode/2up). BYTE. August 1983. p. 188. Retrieved31 January 2015.
Anderson, Thomas; Dahlin, Michael (2014). Operating Systems: Principles and Practice.
Recursive Books. ISBN 978-0-9856735-2-9.
Auslander, M. A.; Larkin, D. C.; Scherr, A. L. (September 1981). "The Evolution of the MVSOperating System". IBM Journal of Research and Development. 25 (5): 471–482.
doi:10.1147/rd.255.0471 (https://doi.org/10.1147%2Frd.255.0471).
Deitel, Harvey M.; Deitel, Paul; Choffnes, David (25 December 2015). Operating Systems (https://archive.org/details/modernoperatings00tane). Pearson/Prentice Hall. ISBN 978-0-13-092641-8.
Bic, Lubomur F.; Shaw, Alan C. (2003). Operating Systems. Pearson: Prentice Hall.
Silberschatz, Avi; Galvin, Peter; Gagne, Greg (2008). Operating Systems Concepts. JohnWiley & Sons. ISBN 978-0-470-12872-5.
O'Brien, J. A., & Marakas, G. M.(2011). Management Information Systems. 10e. McGraw-HillIrwin.
Leva, Alberto; Maggio, Martina; Papadopoulos, Alessandro Vittorio; Terraneo, Federico(2013). Control-based Operating System Design. IET. ISBN 978-1-84919-609-3.
Arpaci-Dusseau, Remzi; Arpaci-Dusseau, Andrea (2015). Operating Systems: Three EasyPieces (http://pages.cs.wisc.edu/~remzi/OSTEP/). Archived (https://web.archive.org/web/20160725012948/http://pages.cs.wisc.edu/~remzi/OSTEP/) from the original on 25 July 2016.
Retrieved 25 July 2016.
Operating Systems (https://curlie.org/Computers/Software/Operating_Systems) at CurlieMultics History (http://www.cbi.umn.edu/iterations/haigh.html) and the history of operatingsystemsRetrieved from "https://en.wikipedia.org/w/index.php?title=Operating_system&oldid=1132908566"Further readingExternal links