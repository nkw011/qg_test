An SQL select statement and its resultDatabaseIn computing, a database is an organized collection ofdata stored and accessed electronically. Smalldatabases can be stored on a file system, while largedatabases are hosted on computer clusters or cloudstorage. The design of databases spans formaltechniques and practical considerations, including datamodeling, efficient data representation and storage,query languages, security and privacy of sensitive data,and distributed computing issues, including supportingconcurrent access and fault tolerance.
A database management system (DBMS) is thesoftware that interacts with end users, applications, andthe database itself to capture and analyze the data. TheDBMS software additionally encompasses the corefacilities provided to administer the database. The sumtotal of the database, the DBMS and the associatedapplications can be referred to as a database system. Often the term "database" is also used loosely to referto any of the DBMS, the database system or an application associated with the database.
Computer scientists may classify database management systems according to the database models that theysupport. Relational databases became dominant in the 1980s. These model data as rows and columns in aseries of tables, and the vast majority use SQL for writing and querying data. In the 2000s, non-relationaldatabases became popular, collectively referred to as NoSQL, because they use different query languages.
Formally, a "database" refers to a set of related data and the way it is organized. Access to this data isusually provided by a "database management system" (DBMS) consisting of an integrated set of computersoftware that allows users to interact with one or more databases and provides access to all of the datacontained in the database (although restrictions may exist that limit access to particular data). The DBMSprovides various functions that allow entry, storage and retrieval of large quantities of information andprovides ways to manage how that information is organized.
Because of the close relationship between them, the term "database" is often used casually to refer to both adatabase and the DBMS used to manipulate it.
Outside the world of professional information technology, the term database is often used to refer to anycollection of related data (such as a spreadsheet or a card index) as size and usage requirements typicallynecessitate use of a database management system.[1]Existing DBMSs provide various functions that allow management of a database and its data which can beclassified into four main functional groups:Data definition – Creation, modification and removal of definitions that define theorganization of the data.
Terminology and overviewUpdate – Insertion, modification, and deletion of the actual data.[2]Retrieval – Providing information in a form directly usable or for further processing by otherapplications. The retrieved data may be made available in a form basically the same as it isstored in the database or in a new form obtained by altering or combining existing data fromthe database.[3]Administration – Registering and monitoring users, enforcing data security, monitoringperformance, maintaining data integrity, dealing with concurrency control, and recoveringinformation that has been corrupted by some event such as an unexpected system failure.[4]Both a database and its DBMS conform to the principles of a particular database model.[5] "Databasesystem" refers collectively to the database model, database management system, and database.[6]Physically, database servers are dedicated computers that hold the actual databases and run only the DBMSand related software. Database servers are usually multiprocessor computers, with generous memory andRAID disk arrays used for stable storage. Hardware database accelerators, connected to one or more serversvia a high-speed channel, are also used in large volume transaction processing environments. DBMSs arefound at the heart of most database applications. DBMSs may be built around a custom multitasking kernelwith built-in networking support, but modern DBMSs typically rely on a standard operating system toprovide these functions.
Since DBMSs comprise a significant market, computer and storage vendors often take into account DBMSrequirements in their own development plans.[7]Databases and DBMSs can be categorized according to the database model(s) that they support (such asrelational or XML), the type(s) of computer they run on (from a server cluster to a mobile phone), the querylanguage(s) used to access the database (such as SQL or XQuery), and their internal engineering, whichaffects performance, scalability, resilience, and security.
The sizes, capabilities, and performance of databases and their respective DBMSs have grown in orders ofmagnitude. These performance increases were enabled by the technology progress in the areas ofprocessors, computer memory, computer storage, and computer networks. The concept of a database wasmade possible by the emergence of direct access storage media such as magnetic disks, which becamewidely available in the mid-1960s; earlier systems relied on sequential storage of data on magnetic tape. Thesubsequent development of database technology can be divided into three eras based on data model orstructure: navigational,[8] SQL/relational, and post-relational.
The two main early navigational data models were the hierarchical model and the CODASYL model(network model). These were characterized by the use of pointers (often physical disk addresses) to followrelationships from one record to another.
The relational model, first proposed in 1970 by Edgar F. Codd, departed from this tradition by insisting thatapplications should search for data by content, rather than by following links. The relational model employssets of ledger-style tables, each used for a different type of entity. Only in the mid-1980s did computinghardware become powerful enough to allow the wide deployment of relational systems (DBMSs plusapplications). By the early 1990s, however, relational systems dominated in all large-scale data processingapplications, and as of 2018 they remain dominant: IBM Db2, Oracle, MySQL, and Microsoft SQL Serverare the most searched DBMS.[9] The dominant database language, standardized SQL for the relationalmodel, has influenced database languages for other data models.
HistoryBasic structure of navigational CODASYLdatabase modelObject databases were developed in the 1980s to overcome the inconvenience of object–relationalimpedance mismatch, which led to the coining of the term "post-relational" and also the development ofhybrid object–relational databases.
The next generation of post-relational databases in the late 2000s became known as NoSQL databases,introducing fast key–value stores and document-oriented databases. A competing "next generation" knownas NewSQL databases attempted new implementations that retained the relational/SQL model while aimingto match the high performance of NoSQL compared to commercially available relational DBMSs.
The introduction of the term database coincided with theavailability of direct-access storage (disks and drums) from themid-1960s onwards. The term represented a contrast with thetape-based systems of the past, allowing shared interactive userather than daily batch processing. The Oxford EnglishDictionary cites a 1962 report by the System DevelopmentCorporation of California as the first to use the term "data-base" in a specific technical sense.[10]As computers grew in speed and capability, a number ofgeneral-purpose database systems emerged; by the mid-1960sa number of such systems had come into commercial use.
Interest in a standard began to grow, and Charles Bachman,author of one such product, the Integrated Data Store (IDS),founded the Database Task Group within CODASYL, thegroup responsible for the creation and standardization ofCOBOL. In 1971, the Database Task Group delivered theirstandard, which generally became known as the CODASYLapproach, and soon a number of commercial products basedon this approach entered the market.
The CODASYL approach offered applications the ability tonavigate around a linked data set which was formed into alarge network. Applications could find records by one of threemethods:1. Use of a primary key (known as a CALC key, typically implemented by hashing)2. Navigating relationships (called sets) from one record to another3. Scanning all the records in a sequential orderLater systems added B-trees to provide alternate access paths. Many CODASYL databases also added adeclarative query language for end users (as distinct from the navigational API). However, CODASYLdatabases were complex and required significant training and effort to produce useful applications.
IBM also had its own DBMS in 1966, known as Information Management System (IMS). IMS was adevelopment of software written for the Apollo program on the System/360. IMS was generally similar inconcept to CODASYL, but used a strict hierarchy for its model of data navigation instead of CODASYL'snetwork model. Both concepts later became known as navigational databases due to the way data was1960s, navigational DBMSIn the relational model, records are"linked" using virtual keys not storedin the database but defined asneeded between the data containedin the records.
accessed: the term was popularized by Bachman's 1973 Turing Award presentation The Programmer asNavigator. IMS is classified by IBM as a hierarchical database. IDMS and Cincom Systems' TOTALdatabases are classified as network databases. IMS remains in use as of 2014.[11]Edgar F. Codd worked at IBM in San Jose, California, in one of their offshoot offices that were primarilyinvolved in the development of hard disk systems. He was unhappy with the navigational model of theCODASYL approach, notably the lack of a "search" facility. In 1970, he wrote a number of papers thatoutlined a new approach to database construction that eventually culminated in the groundbreaking ARelational Model of Data for Large Shared Data Banks.[12]In this paper, he described a new system for storing and working with large databases. Instead of recordsbeing stored in some sort of linked list of free-form records as in CODASYL, Codd's idea was to organizethe data as a number of "tables", each table being used for a different type of entity. Each table wouldcontain a fixed number of columns containing the attributes of the entity. One or more columns of eachtable were designated as a primary key by which the rows of the table could be uniquely identified; cross-references between tables always used these primary keys, rather than disk addresses, and queries wouldjoin tables based on these key relationships, using a set of operations based on the mathematical system ofrelational calculus (from which the model takes its name). Splitting the data into a set of normalized tables(or relations) aimed to ensure that each "fact" was only stored once, thus simplifying update operations.
Virtual tables called views could present the data in different ways for different users, but views could notbe directly updated.
Codd used mathematical terms to define the model: relations, tuples, and domains rather than tables, rows,and columns. The terminology that is now familiar came from early implementations. Codd would latercriticize the tendency for practical implementations to depart from the mathematical foundations on whichthe model was based.
The use of primary keys (user-oriented identifiers) to representcross-table relationships, rather than disk addresses, had twoprimary motivations. From an engineering perspective, it enabledtables to be relocated and resized without expensive databasereorganization. But Codd was more interested in the difference insemantics: the use of explicit identifiers made it easier to defineupdate operations with clean mathematical definitions, and it alsoenabled query operations to be defined in terms of the establisheddiscipline of first-order predicate calculus; because these operationshave clean mathematical properties, it becomes possible to rewritequeries in provably correct ways, which is the basis of queryoptimization. There is no loss of expressiveness compared with thehierarchic or network models, though the connections betweentables are no longer so explicit.
In the hierarchic and network models, records were allowed to havea complex internal structure. For example, the salary history of anemployee might be represented as a "repeating group" within theemployee record. In the relational model, the process of normalization led to such internal structures beingreplaced by data held in multiple tables, connected only by logical keys.
1970s, relational DBMSFor instance, a common use of a database system is to track information about users, their name, logininformation, various addresses and phone numbers. In the navigational approach, all of this data would beplaced in a single variable-length record. In the relational approach, the data would be normalized into auser table, an address table and a phone number table (for instance). Records would be created in theseoptional tables only if the address or phone numbers were actually provided.
As well as identifying rows/records using logical identifiers rather than disk addresses, Codd changed theway in which applications assembled data from multiple records. Rather than requiring applications togather data one record at a time by navigating the links, they would use a declarative query language thatexpressed what data was required, rather than the access path by which it should be found. Finding anefficient access path to the data became the responsibility of the database management system, rather thanthe application programmer. This process, called query optimization, depended on the fact that queries wereexpressed in terms of mathematical logic.
Codd's paper was picked up by two people at Berkeley, Eugene Wong and Michael Stonebraker. Theystarted a project known as INGRES using funding that had already been allocated for a geographicaldatabase project and student programmers to produce code. Beginning in 1973, INGRES delivered its firsttest products which were generally ready for widespread use in 1979. INGRES was similar to System R ina number of ways, including the use of a "language" for data access, known as QUEL. Over time,INGRES moved to the emerging SQL standard.
IBM itself did one test implementation of the relational model, PRTV, and a production one, BusinessSystem 12, both now discontinued. Honeywell wrote MRDS for Multics, and now there are two newimplementations: Alphora Dataphor and Rel. Most other DBMS implementations usually called relationalare actually SQL DBMSs.
In 1970, the University of Michigan began development of the MICRO Information ManagementSystem[13] based on D.L. Childs' Set-Theoretic Data model.[14][15][16] MICRO was used to manage verylarge data sets by the US Department of Labor, the U.S. Environmental Protection Agency, and researchersfrom the University of Alberta, the University of Michigan, and Wayne State University. It ran on IBMmainframe computers using the Michigan Terminal System.[17] The system remained in production until1998.
In the 1970s and 1980s, attempts were made to build database systems with integrated hardware andsoftware. The underlying philosophy was that such integration would provide higher performance at alower cost. Examples were IBM System/38, the early offering of Teradata, and the Britton Lee, Inc.
database machine.
Another approach to hardware support for database management was ICL's CAFS accelerator, a hardwaredisk controller with programmable search capabilities. In the long term, these efforts were generallyunsuccessful because specialized database machines could not keep pace with the rapid development andprogress of general-purpose computers. Thus most database systems nowadays are software systemsrunning on general-purpose hardware, using general-purpose computer data storage. However, this idea isstill pursued in certain applications by some companies like Netezza and Oracle (Exadata).
Integrated approachLate 1970s, SQL DBMSIBM started working on a prototype system loosely based on Codd's concepts as System R in the early1970s. The first version was ready in 1974/5, and work then started on multi-table systems in which thedata could be split so that all of the data for a record (some of which is optional) did not have to be stored ina single large "chunk". Subsequent multi-user versions were tested by customers in 1978 and 1979, bywhich time a standardized query language – SQL – had been added. Codd's ideas were establishingthemselves as both workable and superior to CODASYL, pushing IBM to develop a true productionversion of System R, known as SQL/DS, and, later, Database 2 (IBM Db2).
Larry Ellison's Oracle Database (or more simply, Oracle) started from a different chain, based on IBM'spapers on System R. Though Oracle V1 implementations were completed in 1978, it wasn't until OracleVersion 2 when Ellison beat IBM to market in 1979.[18]Stonebraker went on to apply the lessons from INGRES to develop a new database, Postgres, which is nowknown as PostgreSQL. PostgreSQL is often used for global mission-critical applications (the .org and .infodomain name registries use it as their primary data store, as do many large companies and financialinstitutions).
In Sweden, Codd's paper was also read and Mimer SQL was developed in the mid-1970s at UppsalaUniversity. In 1984, this project was consolidated into an independent enterprise.
Another data model, the entity–relationship model, emerged in 1976 and gained popularity for databasedesign as it emphasized a more familiar description than the earlier relational model. Later on, entity–relationship constructs were retrofitted as a data modeling construct for the relational model, and thedifference between the two has become irrelevant.
The 1980s ushered in the age of desktop computing. The new computers empowered their users withspreadsheets like Lotus 1-2-3 and database software like dBASE. The dBASE product was lightweight andeasy for any computer user to understand out of the box. C. Wayne Ratliff, the creator of dBASE, stated:"dBASE was different from programs like BASIC, C, FORTRAN, and COBOL in that a lot of the dirtywork had already been done. The data manipulation is done by dBASE instead of by the user, so the usercan concentrate on what he is doing, rather than having to mess with the dirty details of opening, reading,and closing files, and managing space allocation."[19] dBASE was one of the top selling software titles inthe 1980s and early 1990s.
The 1990s, along with a rise in object-oriented programming, saw a growth in how data in variousdatabases were handled. Programmers and designers began to treat the data in their databases as objects.
That is to say that if a person's data were in a database, that person's attributes, such as their address, phonenumber, and age, were now considered to belong to that person instead of being extraneous data. Thisallows for relations between data to be related to objects and their attributes and not to individual fields.[20]The term "object–relational impedance mismatch" described the inconvenience of translating betweenprogrammed objects and database tables. Object databases and object–relational databases attempt to solve1980s, on the desktop1990s, object-orientedthis problem by providing an object-oriented language (sometimes as extensions to SQL) that programmerscan use as alternative to purely relational SQL. On the programming side, libraries known as object–relational mappings (ORMs) attempt to solve the same problem.
XML databases are a type of structured document-oriented database that allows querying based on XMLdocument attributes. XML databases are mostly used in applications where the data is conveniently viewedas a collection of documents, with a structure that can vary from the very flexible to the highly rigid:examples include scientific articles, patents, tax filings, and personnel records.
NoSQL databases are often very fast, do not require fixed table schemas, avoid join operations by storingdenormalized data, and are designed to scale horizontally.
In recent years, there has been a strong demand for massively distributed databases with high partitiontolerance, but according to the CAP theorem, it is impossible for a distributed system to simultaneouslyprovide consistency, availability, and partition tolerance guarantees. A distributed system can satisfy any twoof these guarantees at the same time, but not all three. For that reason, many NoSQL databases are usingwhat is called eventual consistency to provide both availability and partition tolerance guarantees with areduced level of data consistency.
NewSQL is a class of modern relational databases that aims to provide the same scalable performance ofNoSQL systems for online transaction processing (read-write) workloads while still using SQL andmaintaining the ACID guarantees of a traditional database system.
Databases are used to support internal operations of organizations and to underpin online interactions withcustomers and suppliers (see Enterprise software).
Databases are used to hold administrative information and more specialized data, such as engineering dataor economic models. Examples include computerized library systems, flight reservation systems,computerized parts inventory systems, and many content management systems that store websites ascollections of webpages in a database.
One way to classify databases involves the type of their contents, for example: bibliographic, document-text, statistical, or multimedia objects. Another way is by their application area, for example: accounting,music compositions, movies, banking, manufacturing, or insurance. A third way is by some technicalaspect, such as the database structure or interface type. This section lists a few of the adjectives used tocharacterize different kinds of databases.
An in-memory database is a database that primarily resides in main memory, but is typicallybacked-up by non-volatile computer data storage. Main memory databases are faster thandisk databases, and so are often used where response time is critical, such as intelecommunications network equipment.
An active database includes an event-driven architecture which can respond to conditionsboth inside and outside the database. Possible uses include security monitoring, alerting,statistics gathering and authorization. Many databases provide active database features inthe form of database triggers.
2000s, NoSQL and NewSQLUse casesClassificationA cloud database relies on cloud technology. Both the database and most of its DBMSreside remotely, "in the cloud", while its applications are both developed by programmersand later maintained and used by end-users through a web browser and Open APIs.
Data warehouses archive data from operational databases and often from external sourcessuch as market research firms. The warehouse becomes the central source of data for useby managers and other end-users who may not have access to operational data. Forexample, sales data might be aggregated to weekly totals and converted from internalproduct codes to use UPCs so that they can be compared with ACNielsen data. Some basicand essential components of data warehousing include extracting, analyzing, and miningdata, transforming, loading, and managing data so as to make them available for further use.
A deductive database combines logic programming with a relational database.
A distributed database is one in which both the data and the DBMS span multiple computers.
A document-oriented database is designed for storing, retrieving, and managing document-oriented, or semi structured, information. Document-oriented databases are one of the maincategories of NoSQL databases.
An embedded database system is a DBMS which is tightly integrated with an applicationsoftware that requires access to stored data in such a way that the DBMS is hidden from theapplication's end-users and requires little or no ongoing maintenance.[21]End-user databases consist of data developed by individual end-users. Examples of theseare collections of documents, spreadsheets, presentations, multimedia, and other files.
Several products exist to support such databases.
A federated database system comprises several distinct databases, each with its ownDBMS. It is handled as a single database by a federated database management system(FDBMS), which transparently integrates multiple autonomous DBMSs, possibly of differenttypes (in which case it would also be a heterogeneous database system), and provides themwith an integrated conceptual view.
Sometimes the term multi-database is used as a synonym for federated database, though itmay refer to a less integrated (e.g., without an FDBMS and a managed integrated schema)group of databases that cooperate in a single application. In this case, typically middlewareis used for distribution, which typically includes an atomic commit protocol (ACP), e.g., thetwo-phase commit protocol, to allow distributed (global) transactions across the participatingdatabases.
A graph database is a kind of NoSQL database that uses graph structures with nodes,edges, and properties to represent and store information. General graph databases that canstore any graph are distinct from specialized graph databases such as triplestores andnetwork databases.
An array DBMS is a kind of NoSQL DBMS that allows modeling, storage, and retrieval of(usually large) multi-dimensional arrays such as satellite images and climate simulationoutput.
In a hypertext or hypermedia database, any word or a piece of text representing an object,e.g., another piece of text, an article, a picture, or a film, can be hyperlinked to that object.
Hypertext databases are particularly useful for organizing large amounts of disparateinformation. For example, they are useful for organizing online encyclopedias, where userscan conveniently jump around the text. The World Wide Web is thus a large distributedhypertext database.
A knowledge base (abbreviated KB, kb or Δ[22][23]) is a special kind of database forknowledge management, providing the means for the computerized collection, organization,and retrieval of knowledge. Also a collection of data representing problems with theirsolutions and related experiences.
A mobile database can be carried on or synchronized from a mobile computing device.
Operational databases store detailed data about the operations of an organization. Theytypically process relatively high volumes of updates using transactions. Examples includecustomer databases that record contact, credit, and demographic information about abusiness's customers, personnel databases that hold information such as salary, benefits,skills data about employees, enterprise resource planning systems that record details aboutproduct components, parts inventory, and financial databases that keep track of theorganization's money, accounting and financial dealings.
A parallel database seeks to improve performance through parallelization for tasks such asloading data, building indexes and evaluating queries.
The major parallel DBMS architectures which are induced by the underlyinghardware architecture are:Shared memory architecture, where multiple processors share the mainmemory space, as well as other data storage.
Shared disk architecture, where each processing unit (typically consisting ofmultiple processors) has its own main memory, but all units share the otherstorage.
Shared-nothing architecture, where each processing unit has its own mainmemory and other storage.
Probabilistic databases employ fuzzy logic to draw inferences from imprecise data.
Real-time databases process transactions fast enough for the result to come back and beacted on right away.
A spatial database can store the data with multidimensional features. The queries on suchdata include location-based queries, like "Where is the closest hotel in my area?".
A temporal database has built-in time aspects, for example a temporal data model and atemporal version of SQL. More specifically the temporal aspects usually include valid-timeand transaction-time.
A terminology-oriented database builds upon an object-oriented database, often customizedfor a specific field.
An unstructured data database is intended to store in a manageable and protected waydiverse objects that do not fit naturally and conveniently in common databases. It mayinclude email messages, documents, journals, multimedia objects, etc. The name may bemisleading since some objects can be highly structured. However, the entire possible objectcollection does not fit into a predefined structured framework. Most established DBMSs nowsupport unstructured data in various ways, and new dedicated DBMSs are emerging.
Connolly and Begg define database management system (DBMS) as a "software system that enables usersto define, create, maintain and control access to the database".[24] Examples of DBMS's include MySQL,MariaDB, PostgreSQL, Microsoft SQL Server, Oracle Database, and Microsoft Access.
The DBMS acronym is sometimes extended to indicate the underlying database model, with RDBMS forthe relational, OODBMS for the object (oriented) and ORDBMS for the object–relational model. Otherextensions can indicate some other characteristics, such as DDBMS for a distributed database managementsystems.
The functionality provided by a DBMS can vary enormously. The core functionality is the storage, retrievaland update of data. Codd proposed the following functions and services a fully-fledged general purposeDBMS should provide:[25]Database management systemData storage, retrieval and updateUser accessible catalog or data dictionary describing the metadataSupport for transactions and concurrencyFacilities for recovering the database should it become damagedSupport for authorization of access and update of dataAccess support from remote locationsEnforcing constraints to ensure data in the database abides by certain rulesIt is also generally to be expected the DBMS will provide a set of utilities for such purposes as may benecessary to administer the database effectively, including import, export, monitoring, defragmentation andanalysis utilities.[26] The core part of the DBMS interacting between the database and the applicationinterface sometimes referred to as the database engine.
Often DBMSs will have configuration parameters that can be statically and dynamically tuned, for examplethe maximum amount of main memory on a server the database can use. The trend is to minimize theamount of manual configuration, and for cases such as embedded databases the need to target zero-administration is paramount.
The large major enterprise DBMSs have tended to increase in size and functionality and have involved upto thousands of human years of development effort throughout their lifetime.[a]Early multi-user DBMS typically only allowed for the application to reside on the same computer withaccess via terminals or terminal emulation software. The client–server architecture was a developmentwhere the application resided on a client desktop and the database on a server allowing the processing to bedistributed. This evolved into a multitier architecture incorporating application servers and web servers withthe end user interface via a web browser with the database only directly connected to the adjacent tier.[28]A general-purpose DBMS will provide public application programming interfaces (API) and optionally aprocessor for database languages such as SQL to allow applications to be written to interact with andmanipulate the database. A special purpose DBMS may use a private API and be specifically customizedand linked to a single application. For example, an email system performs many of the functions of ageneral-purpose DBMS such as message insertion, message deletion, attachment handling, blocklist lookup,associating messages an email address and so forth however these functions are limited to what is requiredto handle email.
External interaction with the database will be via an application program that interfaces with the DBMS.[29]This can range from a database tool that allows users to execute SQL queries textually or graphically, to awebsite that happens to use a database to store and search information.
ApplicationApplication program interfaceA programmer will code interactions to the database (sometimes referred to as a datasource) via anapplication program interface (API) or via a database language. The particular API or language chosen willneed to be supported by DBMS, possibly indirectly via a preprocessor or a bridging API. Some API's aimto be database independent, ODBC being a commonly known example. Other common API's includeJDBC and ADO.NET.
Database languages are special-purpose languages, which allow one or more of the following tasks,sometimes distinguished as sublanguages:Data control language (DCL) – controls access to data;Data definition language (DDL) – defines data types such as creating, altering, or droppingtables and the relationships among them;Data manipulation language (DML) – performs tasks such as inserting, updating, or deletingdata occurrences;Data query language (DQL) – allows searching for information and computing derivedinformation.
Database languages are specific to a particular data model. Notable examples include:SQL combines the roles of data definition, data manipulation, and query in a singlelanguage. It was one of the first commercial languages for the relational model, although itdeparts in some respects from the relational model as described by Codd (for example, therows and columns of a table can be ordered). SQL became a standard of the AmericanNational Standards Institute (ANSI) in 1986, and of the International Organization forStandardization (ISO) in 1987. The standards have been regularly enhanced since and aresupported (with varying degrees of conformance) by all mainstream commercial relationalDBMSs.[30][31]OQL is an object model language standard (from the Object Data Management Group). It hasinfluenced the design of some of the newer query languages like JDOQL and EJB QL.
XQuery is a standard XML query language implemented by XML database systems such asMarkLogic and eXist, by relational databases with XML capability such as Oracle and Db2,and also by in-memory XML processors such as Saxon.
SQL/XML combines XQuery with SQL.[32]A database language may also incorporate features like:DBMS-specific configuration and storage engine managementComputations to modify query results, like counting, summing, averaging, sorting, grouping,and cross-referencingConstraint enforcement (e.g. in an automotive database, only allowing one engine type percar)Application programming interface version of the query language, for programmerconvenienceDatabase languagesStorageDatabase storage is the container of the physical materialization of a database. It comprises the internal(physical) level in the database architecture. It also contains all the information needed (e.g., metadata, "dataabout the data", and internal data structures) to reconstruct the conceptual level and external level from theinternal level when needed. Databases as digital objects contain three layers of information which must bestored: the data, the structure, and the semantics. Proper storage of all three layers is needed for futurepreservation and longevity of the database.[33] Putting data into permanent storage is generally theresponsibility of the database engine a.k.a. "storage engine". Though typically accessed by a DBMSthrough the underlying operating system (and often using the operating systems' file systems asintermediates for storage layout), storage properties and configuration settings are extremely important forthe efficient operation of the DBMS, and thus are closely maintained by database administrators. A DBMS,while in operation, always has its database residing in several types of storage (e.g., memory and externalstorage). The database data and the additional needed information, possibly in very large amounts, arecoded into bits. Data typically reside in the storage in structures that look completely different from the waythe data look at the conceptual and external levels, but in ways that attempt to optimize (the best possible)these levels' reconstruction when needed by users and programs, as well as for computing additional typesof needed information from the data (e.g., when querying the database).
Some DBMSs support specifying which character encoding was used to store data, so multiple encodingscan be used in the same database.
Various low-level database storage structures are used by the storage engine to serialize the data model so itcan be written to the medium of choice. Techniques such as indexing may be used to improve performance.
Conventional storage is row-oriented, but there are also column-oriented and correlation databases.
Often storage redundancy is employed to increase performance. A common example is storing materializedviews, which consist of frequently needed external views or query results. Storing such views saves theexpensive computing them each time they are needed. The downsides of materialized views are theoverhead incurred when updating them to keep them synchronized with their original updated databasedata, and the cost of storage redundancy.
Occasionally a database employs storage redundancy by database objects replication (with one or morecopies) to increase data availability (both to improve performance of simultaneous multiple end-useraccesses to the same database object, and to provide resiliency in a case of partial failure of a distributeddatabase). Updates of a replicated object need to be synchronized across the object copies. In many cases,the entire database is replicated.
With data virtualization, the data used remains in its original locations and real-time access is established toallow analytics across multiple sources. This can aid in resolving some technical difficulties such ascompatibility problems when combining data from various platforms, lowering the risk of error caused byfaulty data, and guaranteeing that the newest data is used. Furthermore, avoiding the creation of a newMaterialized viewsReplicationVirtualizationdatabase containing personal information can make it easier to comply with privacy regulations. However,with data virtualization, the connection to all necessary data sources must be operational as there is no localcopy of the data, which is one of the main drawbacks of the approach.[34]Database security deals with all various aspects of protecting the database content, its owners, and its users.
It ranges from protection from intentional unauthorized database uses to unintentional database accesses byunauthorized entities (e.g., a person or a computer program).
Database access control deals with controlling who (a person or a certain computer program) are allowed toaccess what information in the database. The information may comprise specific database objects (e.g.,record types, specific records, data structures), certain computations over certain objects (e.g., query types,or specific queries), or using specific access paths to the former (e.g., using specific indexes or other datastructures to access information). Database access controls are set by special authorized (by the databaseowner) personnel that uses dedicated protected security DBMS interfaces.
This may be managed directly on an individual basis, or by the assignment of individuals and privileges togroups, or (in the most elaborate models) through the assignment of individuals and groups to roles whichare then granted entitlements. Data security prevents unauthorized users from viewing or updating thedatabase. Using passwords, users are allowed access to the entire database or subsets of it called"subschemas". For example, an employee database can contain all the data about an individual employee,but one group of users may be authorized to view only payroll data, while others are allowed access to onlywork history and medical data. If the DBMS provides a way to interactively enter and update the database,as well as interrogate it, this capability allows for managing personal databases.
Data security in general deals with protecting specific chunks of data, both physically (i.e., from corruption,or destruction, or removal; e.g., see physical security), or the interpretation of them, or parts of them tomeaningful information (e.g., by looking at the strings of bits that they comprise, concluding specific validcredit-card numbers; e.g., see data encryption).
Change and access logging records who accessed which attributes, what was changed, and when it waschanged. Logging services allow for a forensic database audit later by keeping a record of accessoccurrences and changes. Sometimes application-level code is used to record changes rather than leavingthis in the database. Monitoring can be set up to attempt to detect security breaches. Therefore,organizations must take database security seriously because of the many benefits it provides. Organizationswill be safeguarded from security breaches and hacking activities like firewall intrusion, virus spread, andransom ware. This helps in protecting the company’s essential information, which cannot be shared withoutsiders at any cause.[35]Database transactions can be used to introduce some level of fault tolerance and data integrity after recoveryfrom a crash. A database transaction is a unit of work, typically encapsulating a number of operations over adatabase (e.g., reading a database object, writing, acquiring or releasing a lock, etc.), an abstractionsupported in database and also other systems. Each transaction has well defined boundaries in terms ofwhich program/code executions are included in that transaction (determined by the transaction'sprogrammer via special transaction commands).
SecurityTransactions and concurrencyThe acronym ACID describes some ideal properties of a database transaction: atomicity, consistency,isolation, and durability.
A database built with one DBMS is not portable to another DBMS (i.e., the other DBMS cannot run it).
However, in some situations, it is desirable to migrate a database from one DBMS to another. The reasonsare primarily economical (different DBMSs may have different total costs of ownership or TCOs),functional, and operational (different DBMSs may have different capabilities). The migration involves thedatabase's transformation from one DBMS type to another. The transformation should maintain (if possible)the database related application (i.e., all related application programs) intact. Thus, the database's conceptualand external architectural levels should be maintained in the transformation. It may be desired that also someaspects of the architecture internal level are maintained. A complex or large database migration may be acomplicated and costly (one-time) project by itself, which should be factored into the decision to migrate.
This is in spite of the fact that tools may exist to help migration between specific DBMSs. Typically, aDBMS vendor provides tools to help import databases from other popular DBMSs.
After designing a database for an application, the next stage is building the database. Typically, anappropriate general-purpose DBMS can be selected to be used for this purpose. A DBMS provides theneeded user interfaces to be used by database administrators to define the needed application's datastructures within the DBMS's respective data model. Other user interfaces are used to select needed DBMSparameters (like security related, storage allocation parameters, etc.).
When the database is ready (all its data structures and other needed components are defined), it is typicallypopulated with initial application's data (database initialization, which is typically a distinct project; in manycases using specialized DBMS interfaces that support bulk insertion) before making it operational. In somecases, the database becomes operational while empty of application data, and data are accumulated duringits operation.
After the database is created, initialized and populated it needs to be maintained. Various databaseparameters may need changing and the database may need to be tuned (tuning) for better performance;application's data structures may be changed or added, new related application programs may be written toadd to the application's functionality, etc.
Sometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when thedatabase is found corrupted due to a software error, or if it has been updated with erroneous data). Toachieve this, a backup operation is done occasionally or continuously, where each desired database state(i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backupfiles (many techniques exist to do this effectively). When it is decided by a database administrator to bringthe database back to this state (e.g., by specifying this state by a desired point in time when the databasewas in this state), these files are used to restore that state.
MigrationBuilding, maintaining, and tuningBackup and restoreStatic analysisStatic analysis techniques for software verification can be applied also in the scenario of query languages. Inparticular, the *Abstract interpretation framework has been extended to the field of query languages forrelational databases as a way to support sound approximation techniques.[36] The semantics of querylanguages can be tuned according to suitable abstractions of the concrete domain of data. The abstraction ofrelational database systems has many interesting applications, in particular, for security purposes, such asfine-grained access control, watermarking, etc.
Other DBMS features might include:Database logs – This helps in keeping a history of the executed functions.
Graphics component for producing graphs and charts, especially in a data warehousesystem.
Query optimizer – Performs query optimization on every query to choose an efficient queryplan (a partial order (tree) of operations) to be executed to compute the query result. May bespecific to a particular storage engine.
Tools or hooks for database design, application programming, application programmaintenance, database performance analysis and monitoring, database configurationmonitoring, DBMS hardware configuration (a DBMS and related database may spancomputers, networks, and storage units) and related database mapping (especially for adistributed DBMS), storage allocation and database layout monitoring, storage migration,etc.
Increasingly, there are calls for a single system that incorporates all of these core functionalities into thesame build, test, and deployment framework for database management and source control. Borrowing fromother developments in the software industry, some market such offerings as "DevOps for database".[37]The first task of a databasedesigner is to produce aconceptual data model thatreflects the structure of theinformation to be held in thedatabase. A common approachto this is to develop an entity–relationship model, often withthe aid of drawing tools. Anotherpopular approach is the UnifiedModeling Language. Asuccessful data model willaccurately reflect the possiblestate of the external world beingmodeled: for example, if peoplecan have more than one phonenumber, it will allow thisinformation to be captured. Designing a good conceptual data model requires a good understanding of theapplication domain; it typically involves asking deep questions about the things of interest to anorganization, like "can a customer also be a supplier?", or "if a product is sold with two different forms ofpackaging, are those the same product or different products?", or "if a plane flies from New York to DubaiMiscellaneous featuresDesign and modelingvia Frankfurt, is that one flight or two (or maybe even three)?". The answers to these questions establishdefinitions of the terminology used for entities (customers, products, flights, flight segments) and theirrelationships and attributes.
Producing the conceptual data model sometimes involves input from business processes, or the analysis ofworkflow in the organization. This can help to establish what information is needed in the database, andwhat can be left out. For example, it can help when deciding whether the database needs to hold historicdata as well as current data.
Having produced a conceptual data model that users are happy with, the next stage is to translate this into aschema that implements the relevant data structures within the database. This process is often called logicaldatabase design, and the output is a logical data model expressed in the form of a schema. Whereas theconceptual data model is (in theory at least) independent of the choice of database technology, the logicaldata model will be expressed in terms of a particular database model supported by the chosen DBMS. (Theterms data model and database model are often used interchangeably, but in this article we use data modelfor the design of a specific database, and database model for the modeling notation used to express thatdesign).
The most popular database model for general-purpose databases is the relational model, or more precisely,the relational model as represented by the SQL language. The process of creating a logical database designusing this model uses a methodical approach known as normalization. The goal of normalization is toensure that each elementary "fact" is only recorded in one place, so that insertions, updates, and deletionsautomatically maintain consistency.
The final stage of database design is to make the decisions that affect performance, scalability, recovery,security, and the like, which depend on the particular DBMS. This is often called physical database design,and the output is the physical data model. A key goal during this stage is data independence, meaning thatthe decisions made for performance optimization purposes should be invisible to end-users and applications.
There are two types of data independence: Physical data independence and logical data independence.
Physical design is driven mainly by performance requirements, and requires a good knowledge of theexpected workload and access patterns, and a deep understanding of the features offered by the chosenDBMS.
Another aspect of physical database design is security. It involves both defining access control to databaseobjects as well as defining security levels and methods for the data itself.
A database model is a type of data model that determines the logical structure of a database andfundamentally determines in which manner data can be stored, organized, and manipulated. The mostpopular example of a database model is the relational model (or the SQL approximation of relational),which uses a table-based format.
Common logical data models for databases include:Navigational databasesHierarchical database modelNetwork modelGraph databaseRelational modelEntity–relationship modelModelsCollage of five types of database modelsTraditional view of data[38]Enhanced entity–relationship modelObject modelDocument modelEntity–attribute–valuemodelStar schemaAn object–relational databasecombines the two relatedstructures.
Physical data models include:Inverted indexFlat fileOther models include:Multidimensional modelArray modelMultivalue modelSpecialized models are optimized for particular types of data:XML databaseSemantic modelContent storeEvent storeTime series modelA database management system provides three views of thedatabase data:The external level defines how each group of end-users sees the organization of data in the database.
A single database can have any number of views atthe external level.
The conceptual level (or logical level) unifies thevarious external views into a compatible globalview.[39] It provides the synthesis of all the externalviews. It is out of the scope of the various databaseend-users, and is rather of interest to databaseapplication developers and database administrators.
The internal level (or physical level) is the internal organization of data inside a DBMS. It isconcerned with cost, performance, scalability and other operational matters. It deals withstorage layout of the data, using storage structures such as indexes to enhanceperformance. Occasionally it stores data of individual views (materialized views), computedfrom generic data, if performance justification exists for such redundancy. It balances all theExternal, conceptual, and internal viewsexternal views' performance requirements, possibly conflicting, in an attempt to optimizeoverall performance across all activities.
While there is typically only one conceptual and internal view of the data, there can be any number ofdifferent external views. This allows users to see database information in a more business-related way ratherthan from a technical, processing viewpoint. For example, a financial department of a company needs thepayment details of all employees as part of the company's expenses, but does not need details aboutemployees that are in the interest of the human resources department. Thus different departments needdifferent views of the company's database.
The three-level database architecture relates to the concept of data independence which was one of themajor initial driving forces of the relational model.[39] The idea is that changes made at a certain level donot affect the view at a higher level. For example, changes in the internal level do not affect applicationprograms written using conceptual level interfaces, which reduces the impact of making physical changes toimprove performance.
The conceptual view provides a level of indirection between internal and external. On the one hand itprovides a common view of the database, independent of different external view structures, and on the otherhand it abstracts away details of how the data are stored or managed (internal level). In principle everylevel, and even every external view, can be presented by a different data model. In practice usually a givenDBMS uses the same data model for both the external and the conceptual levels (e.g., relational model).
The internal level, which is hidden inside the DBMS and depends on its implementation, requires adifferent level of detail and uses its own types of data structure types.
Database technology has been an active research topic since the 1960s, both in academia and in theresearch and development groups of companies (for example IBM Research). Research activity includestheory and development of prototypes. Notable research topics have included models, the atomictransaction concept, related concurrency control techniques, query languages and query optimizationmethods, RAID, and more.
ResearchThe database research area has several dedicated academic journals (for example, ACM Transactions onDatabase Systems-TODS, Data and Knowledge Engineering-DKE) and annual conferences (e.g., ACMSIGMOD, ACM PODS, VLDB, IEEE ICDE).
Comparison of database toolsComparison of object databasemanagement systemsComparison of object–relational databasemanagement systemsComparison of relational databasemanagement systemsData hierarchyData bankData storeDatabase theoryDatabase testingDatabase-centric architectureFlat-file databaseINP (database)Journal of Database ManagementQuestion-focused dataseta. This article quotes a development time of 5 years involving 750 people for DB2 release 9alone.[27]1. Ullman & Widom 1997, p. 1.
2. "Update – Definition of update by Merriam-Webster" (http://www.merriam-webster.com/dictionary/update). merriam-webster.com.
3. "Retrieval – Definition of retrieval by Merriam-Webster" (http://www.merriam-webster.com/dictionary/retrieval). merriam-webster.com.
4. "Administration – Definition of administration by Merriam-Webster" (http://www.merriam-webster.com/dictionary/administration). merriam-webster.com.
5. Tsitchizris & Lochovsky 1982.
6. Beynon-Davies 2003.
7. Nelson & Nelson 2001.
8. Bachman 1973.
9. "TOPDB Top Database index" (https://pypl.github.io/DB.html). pypl.github.io.
10. "database, n" (http://www.oed.com/view/Entry/47411). OED Online. Oxford University Press.
June 2013. Retrieved July 12, 2013. (Subscription required.)11. IBM Corporation (October 2013). "IBM Information Management System (IMS) 13Transaction and Database Servers delivers high performance and low total cost ofownership" (http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?subtype=ca&infotype=an&appname=iSource&supplier=897&letternum=ENUS213-381). Retrieved Feb 20, 2014.
12. Codd 1970.
13. Hershey & Easthope 1972.
14. North 2010.
15. Childs 1968a.
16. Childs 1968b.
See alsoNotesReferences17. M.A. Kahn; D.L. Rumelhart; B.L. Bronson (October 1977). MICRO Information ManagementSystem (Version 5.0) Reference Manual (https://docs.google.com/viewer?a=v&pid=explorer&chrome=true&srcid=0B4t_NX-QeWDYZGMwOTRmOTItZTg2Zi00YmJkLTg4MTktN2E4MWU0YmZlMjE3). Institute of Labor and Industrial Relations (ILIR), University of Michigan andWayne State University.
18. "Oracle 30th Anniversary Timeline" (https://www.oracle.com/us/corporate/profit/p27anniv-timeline-151918.pdf) (PDF). Archived (https://web.archive.org/web/20110320220813/http://www.oracle.com/us/corporate/profit/p27anniv-timeline-151918.pdf) (PDF) from the original on2011-03-20. Retrieved 23 August 2017.
19. Interview with Wayne Ratliff (http://www.foxprohistory.org/interview_wayne_ratliff.htm). TheFoxPro History. Retrieved on 2013-07-12.
20. Development of an object-oriented DBMS; Portland, Oregon, United States; Pages: 472–482; 1986; ISBN 0-89791-204-721. Graves, Steve. "COTS Databases For Embedded Systems" (http://www.embedded-computing.com/articles/id/?2020) Archived (https://web.archive.org/web/20071114050734/http://www.
embedded-computing.com/articles/id/?2020) 2007-11-14 at the Wayback Machine,Embedded Computing Design magazine, January 2007. Retrieved on August 13, 2008.
22. Argumentation in Artificial Intelligence by Iyad Rahwan, Guillermo R. Simari23. "OWL DL Semantics" (http://www.obitko.com/tutorials/ontologies-semantic-web/owl-dl-semantics.html). Retrieved 10 December 2010.
24. Connolly & Begg 2014, p. 64.
25. Connolly & Begg 2014, pp. 97–102.
26. Connolly & Begg 2014, p. 102.
27. Chong et al. 2007.
28. Connolly & Begg 2014, pp. 106–113.
29. Connolly & Begg 2014, p. 65.
30. Chapple 2005.
31. "Structured Query Language (SQL)" (http://publib.boulder.ibm.com/infocenter/db2luw/v9/index.jsp?topic=com.ibm.db2.udb.admin.doc/doc/c0004100.htm). International BusinessMachines. October 27, 2006. Retrieved 2007-06-10.
32. Wagner 2010.
33. Ramalho, J.C.; Faria, L.; Helder, S.; Coutada, M. (31 December 2013). "DatabasePreservation Toolkit: A flexible tool to normalize and give access to databases" (https://core.ac.uk/display/55635702?source=1&algorithmId=15&similarToDoc=55614406&similarToDocKey=CORE&recSetID=f3ffea4d-1504-45e9-bfd6-a0495f5c8f9c&position=2&recommendation_type=same_repo&otherRecs=55614407,55635702,55607961,55613627,2255664).
Biblioteca Nacional de Portugal (BNP). University of Minho.
34. Paiho, Satu; Tuominen, Pekka; Rökman, Jyri; Ylikerälä, Markus; Pajula, Juha; Siikavirta,Hanne (2022). "Opportunities of collected city data for smart cities" (https://doi.org/10.1049/smc2.12044). IET Smart Cities. 4 (4): 275–291. doi:10.1049/smc2.12044 (https://doi.org/10.1049%2Fsmc2.12044). S2CID 253467923 (https://api.semanticscholar.org/CorpusID:253467923).
35. David Y. Chan; Victoria Chiu; Miklos A. Vasarhelyi (2018). Continuous auditing : theory andapplication (1st ed.). Bingley, UK. ISBN 978-1-78743-413-4. OCLC 1029759767 (https://www.worldcat.org/oclc/1029759767).
36. Halder & Cortesi 2011.
37. Ben Linders (January 28, 2016). "How Database Administration Fits into DevOps" (https://www.infoq.com/news/2016/01/database-administration-devops). Retrieved April 15, 2017.
38. itl.nist.gov (1993) Integration Definition for Information Modeling (IDEFIX) (http://www.itl.nist.gov/fipspubs/idef1x.doc) Archived (https://web.archive.org/web/20131203223034/http://www.itl.nist.gov/fipspubs/idef1x.doc) 2013-12-03 at the Wayback Machine. 21 December 1993.
39. Date 2003, pp. 31–32.
Bachman, Charles W. (1973). "The Programmer as Navigator" (https://doi.org/10.1145%2F355611.362534). Communications of the ACM. 16 (11): 653–658.
doi:10.1145/355611.362534 (https://doi.org/10.1145%2F355611.362534).
Beynon-Davies, Paul (2003). Database Systems (3rd ed.). Palgrave Macmillan. ISBN 978-1403916013.
Chapple, Mike (2005). "SQL Fundamentals" (http://databases.about.com/od/sql/a/sqlfundamentals.htm). Databases. About.com. Archived (https://web.archive.org/web/20090222225300/http://databases.about.com/od/sql/a/sqlfundamentals.htm) from the original on 22 February2009. Retrieved 28 January 2009.
Childs, David L. (1968a). Description of a set-theoretic data structure (https://deepblue.lib.umich.edu/bitstream/handle/2027.42/4163/bac0294.0001.001.pdf?sequence=5&isAllowed=y)(PDF) (Technical report). CONCOMP (Research in Conversational Use of Computers)Project. University of Michigan. Technical Report 3.
Childs, David L. (1968b). Feasibility of a set-theoretic data structure: a general structurebased on a reconstituted definition (https://deepblue.lib.umich.edu/bitstream/handle/2027.42/4164/bac0293.0001.001.pdf?sequence=5&isAllowed=y) (PDF) (Technical report).
CONCOMP (Research in Conversational Use of Computers) Project. University of Michigan.
Technical Report 6.
Chong, Raul F.; Wang, Xiaomei; Dang, Michael; Snow, Dwaine R. (2007). "Introduction toDB2" (http://www.ibmpressbooks.com/articles/article.asp?p=1163083). Understanding DB2:Learning Visually with Examples (2nd ed.). ISBN 978-0131580183. Retrieved 17 March2013.
Codd, Edgar F. (1970). "A Relational Model of Data for Large Shared Data Banks" (http://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf) (PDF). Communications of the ACM. 13 (6):377–387. doi:10.1145/362384.362685 (https://doi.org/10.1145%2F362384.362685).
S2CID 207549016 (https://api.semanticscholar.org/CorpusID:207549016).
Connolly, Thomas M.; Begg, Carolyn E. (2014). Database Systems – A Practical Approach toDesign Implementation and Management (6th ed.). Pearson. ISBN 978-1292061184.
Date, C. J. (2003). An Introduction to Database Systems (https://archive.org/details/introductiontoda0000date) (8th ed.). Pearson. ISBN 978-0321197849.
Halder, Raju; Cortesi, Agostino (2011). "Abstract Interpretation of Database QueryLanguages" (http://www.dsi.unive.it/~cortesi/paperi/CL2012.pdf) (PDF). ComputerLanguages, Systems & Structures. 38 (2): 123–157. doi:10.1016/j.cl.2011.10.004 (https://doi.
org/10.1016%2Fj.cl.2011.10.004). ISSN 1477-8424 (https://www.worldcat.org/issn/1477-8424).
Hershey, William; Easthope, Carol (1972). A set theoretic data structure and retrievallanguage (https://docs.google.com/open?id=0B4t_NX-QeWDYNmVhYjAwMWMtYzc3ZS00YjI0LWJhMjgtZTYyODZmNmFkNThh). Spring Joint Computer Conference, May 1972. ACMSIGIR Forum. Vol. 7, no. 4. pp. 45–55. doi:10.1145/1095495.1095500 (https://doi.org/10.1145%2F1095495.1095500).
Nelson, Anne Fulcher; Nelson, William Harris Morehead (2001). Building ElectronicCommerce: With Web Database Constructions. Prentice Hall. ISBN 978-0201741308.
SourcesNorth, Ken (10 March 2010). "Sets, Data Models and Data Independence" (http://drdobbs.com/blogs/database/228700616). Dr. Dobb's. Archived (https://web.archive.org/web/20121024064523/http://www.drdobbs.com/database/sets-data-models-and-data-independence/228700616) from the original on 24 October 2010.
Tsitchizris, Dionysios C.; Lochovsky, Fred H. (1982). Data Models (https://archive.org/details/datamodels00tsic). Prentice–Hall. ISBN 978-0131964280.
Ullman, Jeffrey; Widom, Jennifer (1997). A First Course in Database Systems (https://archive.org/details/firstcourseindat00ullm). Prentice–Hall. ISBN 978-0138613372.
Wagner, Michael (2010), SQL/XML:2006 – Evaluierung der Standardkonformitätausgewählter Datenbanksysteme, Diplomica Verlag, ISBN 978-3836696098Ling Liu and Tamer M. Özsu (Eds.) (2009). "Encyclopedia of Database Systems (https://www.springer.com/computer/database+management+&+information+retrieval/book/978-0-387-49616-0), 4100 p. 60 illus. ISBN 978-0-387-49616-0.
Gray, J. and Reuter, A. Transaction Processing: Concepts and Techniques, 1st edition,Morgan Kaufmann Publishers, 1992.
Kroenke, David M. and David J. Auer. Database Concepts. 3rd ed. New York: Prentice,2007.
Raghu Ramakrishnan and Johannes Gehrke, Database Management Systems (http://pages.
cs.wisc.edu/~dbbook/)Abraham Silberschatz, Henry F. Korth, S. Sudarshan, Database System Concepts (http://www.db-book.com/)Lightstone, S.; Teorey, T.; Nadeau, T. (2007). Physical Database Design: the databaseprofessional's guide to exploiting indexes, views, storage, and more. Morgan KaufmannPress. ISBN 978-0-12-369389-1.
Teorey, T.; Lightstone, S. and Nadeau, T. Database Modeling & Design: Logical Design, 4thedition, Morgan Kaufmann Press, 2005. ISBN 0-12-685352-5DB File extension (http://www.fileextension.org/DB) – information about files with the DBextensionRetrieved from "https://en.wikipedia.org/w/index.php?title=Database&oldid=1130610022"Further readingExternal links